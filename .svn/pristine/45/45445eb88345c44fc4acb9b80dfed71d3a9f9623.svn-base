import { Component, NgZone, ViewChild } from '@angular/core';
import { NavController, ModalController, AlertController } from '@ionic/angular';
import { Booking, ValueGlobal, RoomInfo } from '../providers/book-service';
import { Storage } from '@ionic/storage';
import { C } from '../providers/constants';
import { GlobalFunction } from '../providers/globalfunction';
import * as request from 'requestretry';
import jwt_decode from 'jwt-decode';
import { Platform, Navbar } from 'ionic-angular';
/**
 * Generated class for the RoomdetailreviewPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@Component({
  selector: 'app-roomdetailreview',
  templateUrl: 'roomdetailreview.html',
  styleUrls: ['roomdetailreview.scss'],
})
export class RoomdetailreviewPage {
  Avatar; Name; Address; cin; cout; dur; room; nameroom; jsonroom;
  roomnumber; adults; children; breakfast; PriceAvgPlusTAStr; ischeckpoint = false;
  imgroom; roomtype; indexme; indexroom; cin1; cout1; point; price; ischeck = true; Pricepoint; Pricepointshow; roomcancel;
  public intervalID
  @ViewChild(Navbar) navBar: Navbar;
  constructor(public platform: Platform,public valueGlobal: ValueGlobal, public navCtrl: NavController, private Roomif: RoomInfo, public zone: NgZone,
    public booking: Booking, public storage: Storage, public alertCtrl: AlertController, public value: ValueGlobal, public modalCtrl: ModalController, public gf: GlobalFunction) {
    this.Avatar = Roomif.imgHotel;
    this.Name = booking.HotelName;
    this.Address = Roomif.Address;
    this.cin = booking.CheckInDate;
    this.cout = booking.CheckOutDate;
    this.dur = Roomif.dur;
    this.roomnumber = Roomif.roomnumber;
    this.adults = booking.Adults;
    this.children = booking.Child;
    this.roomtype = Roomif.roomtype;
    this.indexme = booking.indexmealtype;
    this.indexroom = booking.indexroom;
    this.jsonroom = Roomif.jsonroom;
    this.room = Roomif.arrroom;
    var chuoicin = this.cin.split('-');
    var chuoicout = this.cout.split('-');
    this.cin = chuoicin[2] + "-" + chuoicin[1] + "-" + chuoicin[0];
    this.cout = chuoicout[2] + "-" + chuoicout[1] + "-" + chuoicout[0];
    this.nameroom = this.room[0].ClassName;
    this.roomcancel = this.room[0].MealTypeRates[this.indexme];
    this.breakfast = this.room[0].MealTypeRates[this.indexme].Name;
    this.PriceAvgPlusTAStr = this.roomtype.PriceAvgPlusTAStr;
    this.value.flagreview = 1;
    this.storage.get('point').then(point => {
      if (point) {
        //point=500;
        if (point > 0) {
          this.Roomif.point = point;
          this.point = point * 1000;
          this.price = this.point.toLocaleString();
          var tempprice = this.PriceAvgPlusTAStr.replace(/\./g, '').replace(/\,/g, '');
          this.Pricepoint = tempprice - this.point;
          this.Pricepointshow = this.Pricepoint.toLocaleString();
          if (this.Pricepoint <= 0) {
            this.ischeckpoint = true;
            this.Pricepointshow = 0;
          }
        }
      }
    });
    //Xử lý nút back của dt
    this.platform.ready().then(() => {
      this.platform.registerBackButtonAction(() => {
      this.navCtrl.pop();
      })
    })
    //google analytic
    gf.googleAnalytion('roomdetailreview', 'book', '');
  }
  roompaymentbreakdow() {
    // var value = { room: this.room, dur: this.dur, PriceAvgPlusTAStr: this.PriceAvgPlusTAStr, roomnumber: this.roomnumber, roomtype: this.roomtype, indexme: this.indexme, indexroom: this.indexroom };
    var dur = this.dur;
    var roomnumber = this.roomnumber;
    this.clearClonePage("page-roompaymentbreakdown");
    this.navCtrl.navigateForward('/roompaymentbreakdown/' + dur + '/' + roomnumber);
  }
  next() {
    this.Roomif.priceshow = "";
    this.Roomif.pricepoint = 0;
    this.Roomif.ischeckpoint = false;
    if (this.point > 0) {
      if (this.ischeck) {
        this.Roomif.ischeckpoint = this.ischeck;
        this.Roomif.priceshow = this.Pricepointshow;
        if (this.ischeckpoint) {
          this.Roomif.pricepoint = this.roomtype.PriceAvgPlusTAStr.replace(/\./g, '').replace(/\,/g, '');
        } else {
          this.Roomif.pricepoint = this.point;
        }
      }
      else {
        this.Roomif.ischeckpoint = this.ischeck;
        this.Roomif.priceshow = this.PriceAvgPlusTAStr;
        this.Roomif.point = null;
      }
    }
    if (this.room[0].MealTypeRates[this.indexme].Supplier == 'Internal') {
      this.clearClonePage("page-roomadddetails");
      this.navCtrl.navigateForward('roomadddetails');
    } else {
      this.clearClonePage("page-roomadddetailsean");
      this.navCtrl.navigateForward('roomadddetails-ean');
    }
  }
  ionViewDidLoad() {
    this.navBar.backButtonClick = (e: UIEvent) => {
      // todo something
      //this.clearClonePage("page-hoteldetail");
      //this.navCtrl.push("HoteldetailPage");
      this.navCtrl.pop();
    }
  }
  ionViewDidEnter() {
    var se = this;
    se.refreshToken();

  }
  // ionViewWillLeave() {
  //   this.zone.run(() => {
  //     clearInterval(this.intervalID);
  //   })
  // }
  refreshToken() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'GET',
          url: C.urls.baseUrl.urlMobile + '/api/Account/reloadTokenClaims',
          timeout: 10000, maxAttempts: 5, retryDelay: 2000,
          headers:
          {
            'cache-control': 'no-cache',
            'content-type': 'application/json-patch+json',
            authorization: text
          },
        }
        request(options, function (error, response, body) {
          if (response.statusCode != 200) {
            var objError = {
              page: "userprofile",
              func: "refreshToken",
              message: response.statusMessage,
              content: response.body,
              type: "warning"
            };
            C.writeErrorLog(objError);
          }
          if (response.statusCode == 400 || response.statusCode == 401) {
            se.showConfirm();
          }
          if (error) {
            error.page = "userprofile";
            error.func = "refreshToken";
            C.writeErrorLog(error);
          } else {
            var au = JSON.parse(body);
            se.zone.run(() => {
              se.storage.remove('auth_token');
              se.storage.set('auth_token', au.auth_token);
              var decoded = jwt_decode(au.auth_token);
              se.storage.remove('point');
              se.storage.set('point', decoded.point);
              se.storage.get('point').then(point => {
                if (point) {
                  //point=500;
                  if (point > 0) {
                    se.Roomif.point = point;
                    se.point = point * 1000;
                    se.price = se.point.toLocaleString();
                    var tempprice = se.PriceAvgPlusTAStr.replace(/\./g, '').replace(/\,/g, '');
                    se.Pricepoint = tempprice - se.point;
                    se.Pricepointshow = se.Pricepoint.toLocaleString();
                    if (se.Pricepoint <= 0) {
                      se.ischeckpoint = true;
                      se.Pricepointshow = 0;
                    }
                  }
                }
              });
            })
          }
        })
      }
    })
  }
  public async showConfirm(){
    let alert = await this.alertCtrl.create({
      message: "Phiên đăng nhập hết hạn. Nhấn OK để về trang đăng nhập hoặc nhấn Cancel để về màn hình chính.",
      buttons: [{
        text: 'OK',
        role: 'OK',
        handler: () => {
          this.storage.remove('auth_token');
          this.storage.remove('email');
          this.storage.remove('username');
          this.storage.remove('jti');
          this.valueGlobal.logingoback = "MainPage";
          this.navCtrl.navigateForward('/login');
        }
      },
      {
        text: 'Cancel',
        handler: () => {
          this.storage.remove('auth_token');
          this.storage.remove('email');
          this.storage.remove('username');
          this.storage.remove('jti');
          // this.app.getActiveNav().push('MainPage');
          // this.navCtrl.setRoot('MainPage');
          // this.navCtrl.popToRoot();
          // this.app.getRootNav().getActiveChildNav().select(0);
          this.navCtrl.navigateRoot('/');
        }
      }
    ]
  });
  alert.present();
}
  clearClonePage(pagename) {
    //Xóa clone do push page
    let elements = [];
    elements = Array.from(document.querySelectorAll(pagename));
    if (elements != null && elements.length > 0) {
      elements.forEach(el => {
        if (el != null && el.length > 0) {
          el.remove();
        }
      });
    }
  }
  edit() {
    this.zone.run(() => {
      if (this.ischeck) {
        this.ischeck = false;
      }
      else {
        this.ischeck = true;
      }
      if (this.ischeck) {
        if (this.ischeckpoint) {
          this.Pricepointshow = 0;
        }
        else {
          this.price = this.point.toLocaleString();
          var tempprice = this.PriceAvgPlusTAStr.replace(/\./g, '').replace(/\,/g, '');
          this.Pricepoint = tempprice - this.point;
          this.Pricepointshow = this.Pricepoint.toLocaleString();
        }

      } else {
        this.PriceAvgPlusTAStr = this.roomtype.PriceAvgPlusTAStr;
      }
    })
  }
  goback() {
    this.navCtrl.pop();
  }

  // async openRoomCancel() {
  //   const modal = await this.modalCtrl.create({
  //     component: ModalPage,
  //     componentProps: { value: 123 }
  //   });
  //   return await modal.present();
  // }

  // async openRoomCancel() {
  //   let modal = await  this.modalCtrl.create('RoomcanceldatPage', { roomInfo: this.roomcancel });
  //   modal.present();

  //   await  modal.onDidDismiss(() => {
  //     //Xử lý nút back của dt
  //     this.platform.ready().then(() => {
  //       this.platform.registerBackButtonAction(() => {
  //         this.navCtrl.pop();
  //       })
  //     })
  //   })
  // }
  openRoomCancel(){
    // let modal = this.modalCtrl.create('RoomCancelPage',{roomInfo: roominfo});
    // modal.present();
    this.gf.setParams(this.roomcancel,'roomInfo')
    this.navCtrl.navigateForward('/roomcancel');
  }
}
