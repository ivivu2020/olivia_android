import { ValueGlobal } from './../providers/book-service';
import { Component, NgZone, OnInit } from '@angular/core';
import { NavController, AlertController, ModalController, Platform, ActionSheetController } from '@ionic/angular';
import { Storage } from '@ionic/storage';
import * as request from 'requestretry';
import { C } from './../providers/constants';
import { GlobalFunction } from './../providers/globalfunction';
import { Subscription } from 'rxjs/Subscription';
import { NavigationEnd, Router } from '@angular/router';
import { Network } from '@ionic-native/network/ngx';
import { NetworkProvider } from '../network-provider.service';
import { Crop } from '@ionic-native/crop/ngx';
import { ImagePicker } from '@ionic-native/image-picker/ngx';
import { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer/ngx';
import { File } from '@ionic-native/file/ngx';
import { Camera, CameraOptions } from '@ionic-native/camera/ngx';
import { DomSanitizer } from '@angular/platform-browser';

/**
 * Generated class for the TabPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

//@IonicPage()
@Component({
  selector: 'app-tab5',
  templateUrl: 'tab5.page.html',
  styleUrls: ['./tab5.page.scss'],
})

export class Tab5Page implements OnInit {
  loginuser = null;
  username = null;
  listSupport = [];
  isShowConfirm = false;
  point = 0;
  private subscription: Subscription;
  public isConnected: boolean = true;
  base64Image: any;
  croppedImagefilename: any;
  fileType: any;
  croppedImagepath: string;
  avatar: any;
  constructor(public platform: Platform, public navCtrl: NavController, public storage: Storage, public modalCtrl: ModalController,
    public valueGlobal: ValueGlobal, public zone: NgZone, public alertCtrl: AlertController, public gf: GlobalFunction, private router: Router,
    public network: Network,
    public networkProvider: NetworkProvider,
    public actionsheetCtrl: ActionSheetController,
    private camera: Camera,
    private file: File,
    private crop: Crop) {
    storage.get('auth_token').then(auth_token => {
      this.loginuser = auth_token;
    });
    storage.get('username').then(username => {
      this.username = username;
    });
    this.storage.get('point').then(point => {
      this.point = point;
    });
    this.handleSplashScreen();

    //google analytic
    gf.googleAnalytion('show-more', 'Search', '');
    //Kiểm tra mạng trước khi loaddata
    if (this.networkProvider.isOnline()) {
      this.isConnected = true;
      this.networkProvider.setNetworkStatus(true);
      this.gf.setNetworkStatus(true);
      setTimeout(() => {
        //Lấy danh sách nhân viên hỗ trợ
        this.loadEmployeeSupport();
      }, 300)
    } else {
      this.isConnected = false;
      this.networkProvider.setNetworkStatus(false);
      this.gf.setNetworkStatus(false);
      this.gf.showWarning('Không có kết nối mạng', 'Vui lòng kết nối mạng để sử dụng các tính năng của ứng dụng', 'Đóng');
    }
  }

  public async ngOnInit() {
    var se = this;
    await se.onEnter();
    se.subscription = se.router.events.subscribe((event) => {
      se.storage.get('auth_token').then(auth_token => {
        if (auth_token) {
          se.zone.run(() => {
            se.loginuser = auth_token;
            se.refreshUserName();
            se.point = 0;
            se.storage.get('point').then(point => {
              se.point = point;
            });
          })

          if (event instanceof NavigationEnd && (event.url.indexOf("tab5") != -1)) {
            se.onEnter();
          }
        }
      });


    })
  }

  onEnter() {
    var se = this;
    se.zone.run(() => {
      se.storage.get('userInfoData').then((data) => {
        if (data) {
          se.avatar = data.avatar;
        } else {
          se.avatar = null;
        }

      })
      if (se.gf.getParams('userAvatar')) {
        se.croppedImagepath = se.gf.getParams('userAvatar');
      }
    })

  }

  refreshUserName() {
    this.storage.get('username').then(username => {
      this.username = username;
    });
  }

  loadEmployeeSupport() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'GET',
          url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/BookingMemberDetailByUser',
          timeout: 10000, maxAttempts: 5, retryDelay: 2000,
          headers:
          {
            //'postman-token': '89692e55-6555-1572-db28-4becc311f0ba',
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            authorization: text
          }
        };
        request(options, function (error, response, body) {
          if (error) {
            error.page = "show-more";
            error.func = "loadEmployeeSupport";
            error.param = JSON.stringify(options);
            C.writeErrorLog(error);
          } else {
            if (body) {
              se.zone.run(() => {
                se.listSupport = JSON.parse(body);
              });
            } else {
              if (response.statusCode == 400 || response.statusCode == 401) {
                if (se.isShowConfirm) return;
                se.showConfirm("Phiên đăng nhập hết hạn. Xin vui lòng đăng nhập lại để sử dụng chức năng này.");
                se.isShowConfirm = true;
                return;
              } else {
                se.listSupport = [];
              }

            }

          }

        });
      }
    });
  }

  enabledTabbar() {
    let elements = document.querySelectorAll(".tabbar");

    if (elements != null) {
      Object.keys(elements).map((key) => {
        elements[key].style.display = 'flex';
      });
    }
  }

  ionViewDidLoad() {
    this.gf.clearActivatedTab();
    this.enabledTabbar();
  }
  ionViewWillEnter() {
    var se = this;
    if (this.valueGlobal.pagechangetab5) {
      this.navCtrl.navigateForward([this.valueGlobal.pagechangetab5]);
    } else {
      se.point = 0;
      if (this.networkProvider.isOnline()) {
        this.isConnected = true;
        this.networkProvider.setNetworkStatus(true);
        this.gf.setNetworkStatus(true);
        setTimeout(()=>{
          //Lấy danh sách nhân viên hỗ trợ
          this.loadEmployeeSupport();
        },300)
      }else{
        this.isConnected = false;
        this.networkProvider.setNetworkStatus(false);
        this.gf.setNetworkStatus(false);
        this.gf.showWarning('Không có kết nối mạng','Vui lòng kết nối mạng để sử dụng các tính năng của ứng dụng','Đóng');
      }
          setTimeout(()=>{
            se.zone.run(()=>{
              se.loadUserInfo();
             se.refreshUserName();
             se.storage.get('point').then(point => {
              se.point = point;
              });
            })
          },100)
          if(document.querySelector(".tabbar")){
            document.querySelector(".tabbar")['style'].display = 'flex';
          }
    }

  }

  ionViewDidEnter() {
    var se = this;
    se.storage.get('username').then(username => {
      se.username = username;
    });
  }

  /**
   * Load thông tin user
   */
  loadUserInfo() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'GET',
          url: C.urls.baseUrl.urlMobile + '/api/Dashboard/GetUserInfo',
          timeout: 10000, maxAttempts: 5, retryDelay: 2000,
          headers:
          {
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            authorization: text
          }
        };
        request(options, function (error, response, body) {
          if (response.statusCode != 200) {
            var objError = {
              page: "userprofile",
              func: "loadUserInfo",
              message: response.statusMessage,
              content: response.body,
              type: "warning",
              param: JSON.stringify(options)
            };
            C.writeErrorLog(objError);
          }
          if (error) {
            error.page = "userprofile";
            error.func = "loadUserInfo";
            error.param = JSON.stringify(options);
            C.writeErrorLog(error);
          } else {
            if (body) {
              var data = JSON.parse(body);
              se.zone.run(() => {
                if (data) {
                  se.avatar = data.avatar;
                }
              })
              se.storage.set('userInfoData', data);
            }
          }
        });
      }
    })
  }

  async handleSplashScreen(): Promise<void> {
    try {
      // wait for App to finish loading
      await this.platform.ready()
    } catch (error) {
      if (error) {
        error.page = "show-more";
        error.func = "handleSplashScreen";
        C.writeErrorLog(error);
        throw new Error(error)
      };
    }
    const splash = document.getElementById('splash-screen');
    if (splash) {
      splash.style.opacity = '0';
      setTimeout(() => { splash.remove() }, 300);
    }

  }
  goToLogin() {
    this.storage.get('auth_token').then(auth_token => {
      if (!auth_token) {
        this.valueGlobal.logingoback = 'TabPage';
        this.navCtrl.navigateForward('/login');
      }
    });
  }
  goToLogout() {
    this.storage.get('auth_token').then(id_token => {
      if (id_token !== null) {
        this.showConfirmLogout('Bạn có chắc chắn muốn đăng xuất?');
      }
    });
  }
  /***
     * Gọi tổng đài hỗ trợ
     * PDANH 26/02/2019
     */
  async makeCallSupport(value) {
    try {
      let tel = "19001870";
      if (value == 1) {
        tel = "19002045";
      } else if (value == 2) {
        tel = "19001870";
      }
      if (value > 3) {
        tel = value;
      }
      else {
        tel = "19002087";
      }
      setTimeout(() => {
        window.open(`tel:${tel}`, '_system');
      }, 100);
    }
    catch (error) {
      if (error) {
        error.page = "show-more";
        error.func = "makeCallSupport";
        C.writeErrorLog(error);
      };
    }
    //google analytic
    this.gf.googleAnalytion('show-more', 'callsupport', '');
  }


  public async showConfirm(msg) {
    let alert = await this.alertCtrl.create({
      message: msg,
      buttons: [
        {
          text: 'Để sau',
          handler: () => {
            this.storage.remove('auth_token');
            this.storage.remove('email');
            this.storage.remove('username');
            this.storage.remove('jti');
            this.storage.remove('userInfoData');
            this.storage.remove('userRewardData');
            this.storage.remove('point');
            this.storage.remove('blogtripdefault');
            this.storage.remove('infocus');
            this.zone.run(() => {
              this.point = 0;
              this.isShowConfirm = false;
              this.gf.reLoad = true;
              this.valueGlobal.countNotifi = 0;
              this.loginuser = null;
              this.username = "";
            })
            this.navCtrl.navigateBack('/');
          }
        },
        {
          text: 'Đăng nhập',
          role: 'OK',
          handler: () => {
            this.storage.remove('auth_token');
            this.storage.remove('email');
            this.storage.remove('username');
            this.storage.remove('jti');
            this.storage.remove('userInfoData');
            this.storage.remove('userRewardData');
            this.storage.remove('point');
            this.storage.remove('blogtripdefault');
            this.valueGlobal.logingoback = "MainPage";
            this.zone.run(() => {
              this.point = 0;
              this.isShowConfirm = false;
              this.gf.reLoad = true;
              this.valueGlobal.countNotifi = 0;
              this.loginuser = null;
              this.username = "";
            })
            this.navCtrl.navigateForward('/login');
          }
        }
      ]
    });
    alert.present();

    alert.onDidDismiss().then((data) => {
      this.storage.remove('auth_token');
      this.storage.remove('email');
      this.storage.remove('username');
      this.storage.remove('jti');
      this.storage.remove('userInfoData');
      this.storage.remove('userRewardData');
      this.storage.remove('point');
      this.storage.remove('blogtripdefault');
      this.zone.run(() => {
        this.point = 0;
        this.isShowConfirm = false;
        this.gf.reLoad = true;
        this.valueGlobal.countNotifi = 0;
        this.loginuser = null;
        this.username = "";
      })
      this.navCtrl.navigateBack('/');
    })
  }

  public async showConfirmLogin(msg) {
    let alert = await this.alertCtrl.create({
      message: msg,
      buttons: [
        {
          text: 'Để sau',
          handler: () => {
            this.storage.remove('auth_token');
            this.storage.remove('email');
            this.storage.remove('username');
            this.storage.remove('jti');
            this.storage.remove('userInfoData');
            this.storage.remove('userRewardData');
            this.storage.remove('point');
            this.storage.remove('blogtripdefault');
            this.zone.run(() => {
              this.point = 0;
              this.isShowConfirm = false;
              this.gf.reLoad = true;
              this.valueGlobal.countNotifi = 0;
              this.loginuser = null;
              this.username = "";
            })
            this.navCtrl.navigateBack('/');
          }
        },
        {
          text: 'Đăng nhập',
          role: 'OK',
          handler: () => {
            this.storage.remove('auth_token');
            this.storage.remove('email');
            this.storage.remove('username');
            this.storage.remove('jti');
            this.storage.remove('userInfoData');
            this.storage.remove('userRewardData');
            this.storage.remove('point');
            this.storage.remove('blogtripdefault');
            this.zone.run(() => {
              this.point = 0;
              this.isShowConfirm = false;
              this.valueGlobal.logingoback = "MainPage";
              this.gf.reLoad = true;
              this.valueGlobal.countNotifi = 0;
              this.loginuser = null;
              this.username = "";
            })
            this.navCtrl.navigateForward('/login');
          }
        }
      ]
    });
    alert.present();
    alert.onDidDismiss().then((data) => {
      this.isShowConfirm = false;
    })
  }

  public async showConfirmLogout(msg) {
    let alert = await this.alertCtrl.create({
      message: msg,
      cssClass: "cls-alert-showmore",
      buttons: [{
        text: 'Có',
        role: 'OK',
        handler: () => {
          this.storage.remove('auth_token');
          this.storage.remove('email');
          this.storage.remove('username');
          this.storage.remove('jti');
          this.storage.remove('userInfoData');
          this.storage.remove('userRewardData');
          this.storage.remove('weatherInfo');
          this.storage.remove('point');
          this.storage.remove('infocus');
          this.storage.remove('blogtripdefault');
          this.zone.run(() => {
            this.point = 0;
            this.loginuser = null;
            this.username = "";
            this.navCtrl.navigateForward('/login');
            this.isShowConfirm = false;
            this.valueGlobal.countNotifi = 0;
            this.gf.reLoad = true;
          })

        }
      },
      {
        text: 'Không',
        handler: () => {

        }
      }
      ]
    });
    alert.present();
  }

  showUserReward() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        // let modal = this.modalCtrl.create("UserRewardPage");
        // modal.present();
        this.navCtrl.navigateForward('/userreward');
      } else {
        if (se.isShowConfirm) return;
        se.showConfirmLogin("Bạn cần đăng nhập để sử dụng chức năng này.");
        se.isShowConfirm = true;
      }
    });
    //google analytic
    se.gf.googleAnalytion('show-more', 'Search', 'userreward');
  }

  showUserProfile() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        // let modal = se.modalCtrl.create("UserProfilePage");
        // modal.present();
        this.valueGlobal.pagechangetab5='/app/tabs/userprofile';
        this.gf.setParams(se.croppedImagepath, 'userAvatar');
        this.navCtrl.navigateForward(['/app/tabs/userprofile']);
      } else {
        if (se.isShowConfirm) return;
        se.showConfirmLogin("Bạn cần đăng nhập để sử dụng chức năng này.");
        se.isShowConfirm = true;
      }
    });
    //google analytic
    se.gf.googleAnalytion('show-more', 'Search', 'userprofile');
  }

  Point() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        //se.app.getActiveNav().push('CuspointsPage');
        // this.valueGlobal.pagechange='/cuspoints';
        this.navCtrl.navigateForward('/cuspoints');
      } else {
        if (se.isShowConfirm) return;
        se.showConfirmLogin("Bạn cần đăng nhập để sử dụng chức năng này.");
        se.isShowConfirm = true;
      }
    });
    //google analytic
    se.gf.googleAnalytion('show-more', 'Search', 'userpoint');
  }

  showUserReviews() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        // let modal = se.modalCtrl.create("UserReviewsPage");
        // modal.present();
        this.navCtrl.navigateForward('/userreviews');
      } else {
        if (se.isShowConfirm) return;
        se.showConfirmLogin("Bạn cần đăng nhập để sử dụng chức năng này.");
        se.isShowConfirm = true;
      }
    });
    //google analytic
    se.gf.googleAnalytion('show-more', 'Search', 'userreviews');
  }

  clearClonePage(pagename) {
    //Xóa clone do push page
    let elements = [];
    elements = Array.from(document.querySelectorAll(pagename));
    if (elements != null && elements.length > 0) {
      elements.forEach(el => {

        if (el && el != null) {
          //if (el != null && el.length > 0) {
          el.remove();
        }
      });
    }
  }

  sendSMSSupport() {
    var se = this;
    // let modal =se.modalCtrl.create("SendSmsPage");
    // modal.present();
    this.navCtrl.navigateForward('/sendsms');
  }

  showUserTravelHobby() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        se.navCtrl.navigateForward('/usertravelhobby');
      } else {
        if (se.isShowConfirm) return;
        se.showConfirmLogin("Bạn cần đăng nhập để sử dụng chức năng này.");
        se.isShowConfirm = true;
      }
    });
  }

  doRefresh(event) {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        se.loginuser = auth_token;

        se.zone.run(() => {
          se.refreshUserName();
          se.storage.get('point').then(point => {
            se.point = point;
          });
        })
      } else {
        se.showConfirm("Phiên đăng nhập hết hạn. Xin vui lòng đăng nhập lại để sử dụng chức năng này.");
        se.isShowConfirm = true;
      }
    });
    setTimeout(() => {
      event.target.complete();
    }, 200)

  }

  async changeAvatar() {
    let actionSheet = await this.actionsheetCtrl.create({
      cssClass: 'action-sheets-basic-page',
      buttons: [
        {
          text: 'Chụp ảnh',
          role: 'destructive',
          icon: 'camera',
          handler: () => {

            this.captureImage();
          }
        },
        {
          text: 'Chọn ảnh từ bộ sưu tập',
          icon: 'image',
          handler: () => {
            this.captureImageGallery();
          }
        },
      ]
    });
    actionSheet.present();
    actionSheet.onDidDismiss().then((data: any) => {
      if (!data) {
        actionSheet.dismiss();
      }
    })
  }
  /**
   * Chọn từ bộ sưu tập
   * @param useAlbum 
   */
  async captureImageGallery() {
    var se = this;
    const options: CameraOptions = {
      quality: 76,
      sourceType: se.camera.PictureSourceType.SAVEDPHOTOALBUM,
      destinationType: se.camera.DestinationType.FILE_URI,
      encodingType: se.camera.EncodingType.JPEG,
      mediaType: se.camera.MediaType.PICTURE,
      saveToPhotoAlbum: true,
      correctOrientation: true,
    }

    se.camera.getPicture(options).then((imageData) => {
      if (imageData) {
        let filename, path;
        se.base64Image = imageData;
        path = imageData.substring(0, imageData.lastIndexOf('/') + 1);
        filename = imageData.substring(imageData.lastIndexOf('/') + 1);
        let index = filename.indexOf('?');
        if (index > -1) {
          filename = filename.substring(0, index);
        }
        se.croppedImagefilename = filename;
        se.cropImage(imageData);
      }

    })
  }

  /**
   * Chụp ảnh
   * @param useAlbum 
   */
  async captureImage() {
    var se = this;
    const options: CameraOptions = {
      quality: 76,
      destinationType: this.camera.DestinationType.FILE_URI,
      encodingType: this.camera.EncodingType.JPEG,
      mediaType: this.camera.MediaType.PICTURE,
      sourceType: this.camera.PictureSourceType.CAMERA,
      correctOrientation: true,
    }

    this.zone.run(() => {
      this.camera.getPicture(options).then((imageData) => {
        if (imageData) {
          let filename, path;
          se.base64Image = imageData;
          path = imageData.substring(0, imageData.lastIndexOf('/') + 1);
          filename = imageData.substring(imageData.lastIndexOf('/') + 1);
          let index = filename.indexOf('?');
          if (index > -1) {
            filename = filename.substring(0, index);
          }
          se.croppedImagefilename = filename;
          se.cropImage(imageData);
        }
      });
    })
  }

  uploadAvatar(image: any) {
    var se = this;
    se.getFullImage(se.base64Image.split('?')[0]).then((data) => {
      se.storage.get('auth_token').then(auth_token => {
        if (auth_token) {
          var text = "Bearer " + auth_token;
          var options = {
            method: 'POST',
            url: C.urls.baseUrl.urlMobile + '/api/dashboard/UploadAvatarBase64',
            headers:
            {
              Authorization: text,
            },
            body: {
              "imgBase64Full": data,
              "imgBase64Crop": image,
              "fileExtension": se.fileType
            },
            json: true
          };

          request(options, function (error, response, body) {
            if (error) {
              error.page = "userprofile";
              error.func = "captureImage";
              error.param = JSON.stringify(options);
              C.writeErrorLog(error);
            } else {
              se.storage.remove('userInfoData');
            }
          })
        }
      })

    });



  }

  cropImage(imgPath) {
    this.crop.crop(imgPath, { quality: 100 })
      .then(
        newPath => {
          this.showCroppedImage(newPath.split('?')[0]);
        },
        error => {
          throw error;
        }

      )
  }
  /**
   * Trả về dạng base64 của image full
   * @param ImagePath Đường dẫn image full
   */
  getFullImage(ImagePath): Promise<any> {
    return new Promise((resolve, reject) => {
      var copyPath = ImagePath;
      var splitPath = copyPath.split('/');
      var imageName = splitPath[splitPath.length - 1];
      var filePath = ImagePath.split(imageName)[0];
      var splitType = imageName.split('.');
      var imageType = splitType[splitType.length - 1];
      var se = this;
      se.file.readAsDataURL(filePath, imageName).then(base64 => {
        let b64: any = base64.split(',')[1];
        resolve(b64);
      })
    })
  }
  /**
 * Trả về dạng base64 của image đã scrop
 * @param ImagePath Đường dẫn image scrop
 */
  showCroppedImage(ImagePath) {
    var copyPath = ImagePath;
    var splitPath = copyPath.split('/');
    var imageName = splitPath[splitPath.length - 1];
    var filePath = ImagePath.split(imageName)[0];
    var splitType = imageName.split('.');
    var imageType = splitType[splitType.length - 1];

    var se = this;
    se.fileType = imageType;
    se.file.readAsDataURL(filePath, imageName).then(base64 => {
      se.zone.run(() => {
        se.croppedImagepath = base64;
      })
      const contentType = 'image/' + imageType;
      let b64: any = base64.split(',')[1];
      //se.croppedImagepath = "data:image/jpeg;base64,"+base64;
      se.uploadAvatar(b64);
    })

  }
}