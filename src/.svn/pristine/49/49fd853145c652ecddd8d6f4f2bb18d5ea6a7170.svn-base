import { RequestCombo1Page } from './../requestcombo1/requestcombo1';
import { Booking, Bookcombo, ValueGlobal, SearchHotel, RoomInfo } from './../providers/book-service';
import * as request from 'requestretry';
import * as moment from 'moment';
import { Component, ViewChild, NgZone, Renderer, ElementRef,OnInit, Input, ViewChildren, QueryList } from '@angular/core';
import { NavController, ModalController, ToastController, AlertController,LoadingController,Platform, IonSlides,IonRouterOutlet, ActionSheetController } from '@ionic/angular';
import { HttpClientModule } from '@angular/common/http';
import { Storage } from '@ionic/storage';
import { AuthService } from '../providers/auth-service';
import { SocialSharing } from '@ionic-native/social-sharing/ngx';
import {RequestComboPage} from '../requestcombo/requestcombo';

import {
  CalendarModal,
  CalendarModalOptions,
  CalendarOptions,
  DayConfig,
  CalendarResult
} from 'ion2-calendar';
import { C } from './../providers/constants';
import { GlobalFunction } from './../providers/globalfunction';
import { DomSanitizer } from '@angular/platform-browser';
import { IonContent } from '@ionic/angular';
import { DepartureCalendarPage} from '../departurecalendar/departurecalendar';
import { OverlayEventDetail } from '@ionic/core';
import { Router } from '@angular/router';
import { OccupancyPage } from 'src/app/occupancy/occupancy';
import * as util from 'util';


declare var google;
declare var infowindow;

@Component({
  selector: 'app-hoteldetail',
  templateUrl: 'hoteldetail.html',
  styleUrls: ['hoteldetail.scss'],
})
export class HotelDetailPage implements OnInit{
  @Input('myScrollVanish') scrollArea;
  @ViewChild('scrollArea') content: IonContent;
  @ViewChild('mySlider') slider: IonSlides;
  @ViewChild('map') mapElement: ElementRef;
  @ViewChild(IonRouterOutlet) routerOutlets: IonRouterOutlet;
  mapGoogle: any;
  slideData = [];
  name;
  json;
  public jsonroom = [];
  jsonroom1;
  jsonroom2;
  AvgPoint;
  isAvgPoint = true;
  //map: GoogleMap;
  Combos;
  numHotelReviews;
  public cin;
  public cout;
  public cincombo;
  public coutcombo;
  public guest = 2;
  public room1 = 1;
  public room = 1;
  dd; mm;
  selectOptions
  arrcombo; valueComboDetail = [];
  comboDetail:any;
  titlecombo;
  notecombo;
  Description;
  mon;
  arrroom = [];
  public isShown: boolean = false;
  isbtnseemore = true;
  isShow = false;
  HotelReviews;
  arrHotelReviews = [];
  HotelRelated;
  isheader = false;
  isheader1 = true;
  ischeckcombo;
  child1 = 0;
  child = 0;
  adults1 = 2;
  adults = 2;
  arrchild = [];
  arrchild1 = [];
  arrchild2 = [];
  numagesc1;
  numagesc2;
  numagesc3;
  numagesc4;
  numagesc5;
  HotelID = "377594";
  Longitude;
  Latitude;
  imgHotel;
  Address;
  duration;
  ischeckMaxAdults = true;
  RoomID;
  ComboDayNum; ischeckoutofroom; public ischeckbtnreset = false;
  public ischeckbtn = true;
  id1; showpopup = true;
  ischeckadults = true;
  ischeckchild = false;
  ischeckroom = false; ischeck = false;
  Chuoi; scrollTopvalue; indexroom; text; email; flag = 0; num = 0; roomvalue; HotelName; location; comboprice; cocombo = 0;
  lengthslide; coutslide = 1; datecin; datecout; cindisplay; coutdisplay;

  public comboDetailList = [];
  public hotelDetail = [];
  public objDetail:any;
  public hotelRoomClasses = [];
  public hotelRooms = [];
  public loginuser = null;
  public comboid;
  public hotelname; hotelurl; hotelimg;
  public dataListLike = []; itemlike = false;
  public ListHotelRelatedPrice = [];
  public sendRequest = true;
  public hasComboRoom = false;
  public changedate = false;
  public combopriceontitle = null;
  public penaltyItemSelected = -1;
  public hotelAvatar = null;
  public regionId = null;
  fs = false; fc = false; nm = false;
  public loadcomplete = false;
  public showroominfo = false;
  public loadpricecombodone = false;
  public warningMaxPax = '';
  public flashSaleEndDate: any;
  public dateRegex = /^\/Date\((d|-|.*)\)[\/|\\]$/;
  public loadmapdone = false;
  public isexit = false;
  public linkGoogleMap : any;
  public usermail = '';
  public formParam:any;
  public loader = this.loadingCtrl.create({
    message: "Đang xử lý...",
  });
  private hidden:boolean = false;
  slideOpts = {
    zoom: false
  };
  dateofcombo;allowbookcombofc = true;
  constructor(public toastCtrl: ToastController, private alertCtrl: AlertController, public zone: NgZone, public modalCtrl: ModalController, public navCtrl: NavController,
    private http: HttpClientModule, public loadingCtrl: LoadingController, public Roomif: RoomInfo, public renderer: Renderer,
    public booking: Booking, public storage: Storage, public authService: AuthService, public platform: Platform, public bookCombo: Bookcombo, public value: ValueGlobal, public searchhotel: SearchHotel, public valueGlobal: ValueGlobal, private socialSharing: SocialSharing,
    public gf: GlobalFunction,private sanitizer: DomSanitizer,public router: Router,public actionsheetCtrl: ActionSheetController) {
      this.loaddata();
      this.storage.get('email').then(email => {
        this.usermail = email;
      })
      this.platform.ready().then(() => {
        document.addEventListener("backbutton", async() => { 
          try {
                const element = await this.modalCtrl.getTop();
                if (element) {
                    element.dismiss();
                }else{
                  if(!this.searchhotel.showPopup){
                    this.searchhotel.showPopup = true;
                  }else if(this.router.url.indexOf("hotelreviews") != -1
                  || this.router.url.indexOf("hoteldescription") != -1
                  || this.router.url.indexOf("policy") != -1
                  || this.router.url.indexOf("facilities") != -1){
                    this.navCtrl.back();
                  }else{
                    this.goback();
                  }
                }
            } catch (error) {
                console.log(error);
      
            }
                
            })
        })
    }

  ngOnInit(){

  }

  loaddata(){
    //this.HotelID = this.bookCombo.Hotelid;
    this.storage.get('auth_token').then(auth_token => {
      this.loginuser = auth_token;
    });
    this.value.logingoback = "HoteldetailPage";
    if (this.searchhotel.isRefreshDetail) {
      this.HotelID = this.searchhotel.hotelID ? this.searchhotel.hotelID : (this.searchhotel.gbitem ? this.searchhotel.gbitem.HotelId : this.searchhotel.hotelID);
      this.searchhotel.isRefreshDetail = false;
    } else {
      if (this.searchhotel.rootPage == "listpage" || this.searchhotel.rootPage == "topdeal" || this.searchhotel.rootPage == "listmood" || this.searchhotel.rootPage == "likepage" || this.searchhotel.backPage == "roompaymentselect" || this.searchhotel.backPage == "roompaymentselect-ean") {
        this.HotelID = this.searchhotel.hotelID;
      } else if (this.searchhotel.rootPage == "mainpage") {
        this.HotelID = (this.searchhotel.gbitem ? this.searchhotel.gbitem.HotelId : this.searchhotel.hotelID);
      }
    }
    // if (this.searchhotel.backPage == "roompaymentselect-ean"||this.searchhotel.backPage == "roompaymentselect") {
    //   this.HotelID  = this.booking.HotelId;
    // }
    //this.HotelID = searchhotel.hotelID;
    this.hasComboRoom = false;
    this.location = this.bookCombo.location;

    if (this.searchhotel.adult) {
      this.guest = this.searchhotel.adult + this.searchhotel.child;
      this.adults = this.searchhotel.adult;
    }
    if (this.searchhotel.child) {
      this.child = this.searchhotel.child;
    }
    if (this.searchhotel.roomnumber) {
      this.room = this.searchhotel.roomnumber;
    }
    if (this.searchhotel.arrchild) {
      this.arrchild = this.searchhotel.arrchild;
    }
    if (this.searchhotel.CheckInDate) {
      this.cin = this.searchhotel.CheckInDate;
      this.cout = this.searchhotel.CheckOutDate;
      this.datecin = new Date(this.searchhotel.CheckInDate);
      this.datecout = new Date(this.searchhotel.CheckOutDate);
      this.cindisplay = moment(this.datecin).format('DD-MM-YYYY');
      this.coutdisplay = moment(this.datecout).format('DD-MM-YYYY');
    }else{
      this.cin = new Date();
      var rescin = this.cin.setTime(this.cin.getTime() + (24 * 60 * 60 * 1000));
      var datein = new Date(rescin);
      this.cin = moment(datein).format('YYYY-MM-DD');
      this.cindisplay = moment(datein).format('DD-MM-YYYY');
      this.datecin = new Date(rescin);

      this.cout = new Date();
      var res = this.cout.setTime(this.cout.getTime() + (2 * 24 * 60 * 60 * 1000));
      var date = new Date(res);
      this.cout = moment(date).format('YYYY-MM-DD');
      this.coutdisplay = moment(date).format('DD-MM-YYYY');
      this.datecout = new Date(res);
    }
    var date1 = new Date(this.cin);
    var date2 = new Date(this.cout);
    var timeDiff = Math.abs(date2.getTime() - date1.getTime());
    this.duration = Math.ceil(timeDiff / (1000 * 3600 * 24));
    this.presentLoading();
    
  }

  ionViewWillEnter() {
    //this.scrollToTop1();
    var se = this;
    //Xử lý nút back của dt
    // se.platform.ready().then(() => {
    //   this.platform.backButton.subscribe(() => {
    //     // code that is executed when the user pressed the back button
    //     if(this.showpopup==false){
    //       this.showpopup=true;
    //     }else{
    //       this.goback();// IF IT'S NOT THE ROOT, POP A PAGE.
    //     }
    //   })
    // })
    
    //bind lại cin,cout khi đóng popup requestcombo
      if(se.searchhotel.CheckInDate && new Date(se.cin).toLocaleDateString() != new Date(se.searchhotel.CheckInDate).toLocaleDateString()){
        se.zone.run(() => {
          //this.getDetailCombo(null);
          se.cin = se.searchhotel.CheckInDate;
          se.cout = se.searchhotel.CheckOutDate;
          se.datecin = new Date(se.searchhotel.CheckInDate);
          se.datecout = new Date(se.searchhotel.CheckOutDate);
          se.cindisplay = moment(se.datecin).format('DD-MM-YYYY');
          se.coutdisplay = moment(se.datecout).format('DD-MM-YYYY');
          se.changedate = true;
          se.hasComboRoom = false;
          se.comboprice = se.combopriceontitle;
          se.showpopup = true;
          se.ischeck = true;
          se.guest = se.adults + se.child;
          //se.scrollToTopwithvalue1();
          if(se.comboid){
            se.getDetailCombo(se.comboid);
          }
          se.getdataroom();
          })
      }
  }

  ionViewDidLoad() {

    //this.loadMap();
    let elements = document.querySelectorAll(".tabbar");

    if (elements != null) {
      Object.keys(elements).map((key) => {
        elements[key].style.display = 'none';
      });
    }
    // //Xử lý nút back của dt
    // this.platform.ready().then(() => {
    //   this.platform.backButton.subscribe(() => {
    //     // code that is executed when the user pressed the back button
    //     if(this.showpopup==false){
    //       this.showpopup=true;
    //     }else{
    //       this.goback();// IF IT'S NOT THE ROOT, POP A PAGE.
    //     }
    //   })
    // })
  }
  closeModal() {
    //this.loadMap();
    var se = this;
    se.zone.run(() => {
      se.ischeck = true;
      se.showpopup = true;
      se.loadcomplete = true;
    });
    //se.content.scrollToTop(50);
  }
  public scrollFunction = (event: any) => {
    try{
      this.zone.run(() => {
        if (this.penaltyItemSelected != -1) {
          this.penaltyItemSelected = -1;
        }
      })
      let el = document.getElementsByClassName('div-float-arrow');
      if(el.length >0){
          if(event.detail.currentY === 0 && this.hidden){
            el[0].classList.add('float-arrow-enabled');
            el[0].classList.remove('float-arrow-disabled');
            this.hidden = false;
          }
          else if(!this.hidden && event.detail.deltaY > 1){
            el[0].classList.remove('float-arrow-enabled');
            el[0].classList.add('float-arrow-disabled');
            this.hidden = true;
          } else if(this.hidden && event.detail.deltaY < -1) {
            el[0].classList.add('float-arrow-enabled');
            el[0].classList.remove('float-arrow-disabled');
            this.hidden = false;
          }
          if(event.detail.currentY < 615){
            el[0].classList.remove('float-arrow-enabled');
            el[0].classList.add('float-arrow-disabled');
            this.hidden = true;
          }
      }
    }catch(error){
      error.page="hoteldetail";
        error.func="scrollFunction";
        error.param = "";
        C.writeErrorLog(error);
    }
    
  }

  async openmnu() {
    // this.showpopup = false;
    const modal: HTMLIonModalElement =
    await this.modalCtrl.create({
      component: OccupancyPage,

    });

    this.gf.setParams(true,'requestcombo');
    modal.present();
  //this.navCtrl.navigateForward('/requestcombo');;

  modal.onDidDismiss().then((data: OverlayEventDetail) => {
    var se = this;
        se.zone.run(() => {
          se.hotelRoomClasses = [];
          se.loadpricecombodone = false;
          se.loadcomplete = false;
          se.isheader = false;
          se.isShown = false;
          if(se.searchhotel.adult){
            se.guest = se.searchhotel.adult + se.searchhotel.child;
            se.child = se.searchhotel.child;
            se.adults = se.searchhotel.adult;
            se.child = se.searchhotel.child;
          }else{
            se.guest = se.adults1 + se.child1;
            se.child = se.child1;
          }
          
          if(se.searchhotel.roomnumber || se.room){
            se.room = se.searchhotel.roomnumber ? se.searchhotel.roomnumber : se.room;
            se.room1 = se.room;
          }else{
            se.room == se.room1;
          }

          
          if(se.searchhotel.arrchild && se.searchhotel.arrchild.length >0){
            se.arrchild = [];
            //se.this.arrchild2 = 
            for (let i = 0; i < se.searchhotel.arrchild.length; i++) {
              se.arrchild.push(se.searchhotel.arrchild[i]);
            }
          }
          
          if (se.comboid) {
            se.getDetailCombo(se.comboid);
          }
          //se.getdataroom();
          se.checkPriceHotelDetail().then((check)=>{
            if(check){
              se.getdataroom();
            }else{
              se.hotelRoomClasses = [];
              se.ischeckoutofroom = false;
              se.loadcomplete = true;
              se.ischeck = true;
            }
          });
        })
    })

  }
  done() {
    var se = this;
    se.room = se.room1;
    se.adults = se.adults1;
    se.child = se.child1
    se.arrchild = [];
    for (let i = 0; i < se.arrchild2.length; i++) {
      se.arrchild.push(se.arrchild2[i]);

    }
    se.searchhotel.adult = se.adults;
    se.searchhotel.child = se.child;
    se.searchhotel.roomnumber = se.room;
    se.searchhotel.arrchild = se.arrchild;

    se.zone.run(() => {
      se.ischeck = false;
      se.showpopup = true;
      se.isheader = false;
      se.guest = se.adults + se.child;
      se.scrollToTopwithvalue1();
    })


  }

  loadMap() {
    let posMaceio = { lat: this.Latitude, lng: this.Longitude }
    this.mapGoogle = new google.maps.Map(this.mapElement.nativeElement, {
      zoom: 12,
      center: posMaceio,
      mapTypeId: 'roadmap'
    });

    this.mapGoogle.setCenter(posMaceio);
    var latLng = new google.maps.LatLng(this.Latitude, this.Longitude);

    var marker = new google.maps.Marker({
      position: latLng,
      map: this.mapGoogle,
    });
    google.maps.event.addListener(marker, 'click', function () {
      infowindow.open(this.mapGoogle, marker);
    });
    // // Create a map after the view is ready and the native platform is ready.
    //   this.map = GoogleMaps.create('map_canvas');
    // this.map.clear();

    // var lat = this.Latitude;
    // var lng = this.Longitude
    // // Get the location of you

    // // Move the map camera to the location with animation
    // this.map.animateCamera({
    //   target: {
    //     lat: this.Latitude,
    //     lng: this.Longitude
    //   },
    //   zoom: 12,
    //   tilt: 30
    // })
    //   .then(() => {
    //     // add a marker
    //     let marker: Marker = this.map.addMarkerSync({
    //       position: {
    //         lat: this.Latitude,
    //         lng: this.Longitude
    //       },
    //       animation: GoogleMapsAnimation.BOUNCE
    //     });
    //     // show the infoWindow
    //     marker.showInfoWindow();
    //     //this.loadmapdone = true;
    //   }).catch(error=>{
    //     error.page = "hoteldetail";
    //     error.func = "loadMap";
    //     C.writeErrorLog(error);
    //   });

    // if (this.flag == 1) {
    //   this.scrollToTop1();
    // }
  }

  doInfinite(infiniteScroll) {

    this.isShown = true;
    infiniteScroll.complete();

  }

  scrollToTop() {


    //this.isShown = false;
    this.content.scrollToTop(500);
    //this.isheader = false;




    // TOTAL CONTENT SIZE
    //this.isShown = screenSize - bottomPosition >= 10 ? true : false;
    //alert(this.isShown);
  }
  scrollToTopwithvalue() {
    this.zone.run(() => {
      this.isShown = false;
      this.content.scrollToTop(50);
      this.isheader = false;
    })
  }
  scrollToTopwithvalue1() {
    this.zone.run(() => {
      this.isShown = false;
      this.content.scrollToTop(50);
      this.isheader = false;
      this.presentLoading();
    })
  }
  scrollToTop1() {
    this.zone.run(() => {
      this.isShown = false;
      this.content.scrollToTop(50);
      this.isheader = false;
    })
    // TOTAL CONTENT SIZE
    //this.isShown = screenSize - bottomPosition >= 10 ? true : false;
    //alert(this.isShown);
  }
  strip_html_tags(str) {
    if ((str === null) || (str === ''))
      return false;
    else
      str = str.toString();
    return str.replace(/<[^>]*>/g, '');
  }
  presentLoading() {
    this.getdata();
  }
  
  async getdata() {
    let url = C.urls.baseUrl.urlPost + "/mhoteldetail/" + this.HotelID;
    var se = this;
    var options = {
      method: 'POST',
      url: url,
      timeout: 180000, maxAttempts: 5, retryDelay: 2000,
    };
    request(options, function (error, response, body) {
      if(response.statusCode != 200){
        var objError ={
            page: "hoteldetail",
            func: "loaddata",
            message : response.statusMessage,
            content : response.body,
            type: "warning",
            param: JSON.stringify(options)
          };
        C.writeErrorLog(objError);
      }
      if (error) {
        error.page="hoteldetail";
        error.func="loaddata";
        error.param = JSON.stringify(options);
        C.writeErrorLog(objError);
      }
      if(response.statusCode== 200){
    //this.http.post(url + "/mhoteldetail/" + this.HotelID, "")
      // .timeout(100000)
      // .toPromise()
      // .then(data => {
        //let jsondata = data.json();
        let jsondata = JSON.parse(body);
        //google analytic
        se.gf.googleAnalytion('hoteldetail','Search',jsondata.Code+'/'+se.cin+'/'+se.cout);
        se.updateLikeStatus(jsondata);
        se.objDetail = jsondata;
        se.hotelDetail = [];
        se.hotelDetail.push(jsondata);
        se.hotelDetail = se.hotelDetail[0];
        se.hotelname = jsondata.Name;
        se.hotelurl = "https://www.ivivu.com" + jsondata.Url;
        let link ="https://maps.google.com/maps?q="+ se.hotelname+"&hl=es;z=14&amp&output=embed";
        se.linkGoogleMap = se.sanitizer.bypassSecurityTrustResourceUrl(link);
        //se.hotelAvatar = "https:" + jsondata.Avatar;
        se.hotelAvatar = (jsondata.Avatar.toLocaleString().trim().indexOf("http") != -1) ? jsondata.Avatar : 'https:' + jsondata.Avatar;
        se.regionId = jsondata.RegionId;
        se.bookCombo.HotelLink = se.hotelurl;
        se.bookCombo.Avatar = se.hotelAvatar;
        se.bookCombo.RegionId = se.regionId;
        se.bookCombo.HotelName = se.hotelname;
        se.bookCombo.Hotelid = se.HotelID;
        se.id1 = { id: se.HotelID };
        if (jsondata.HotelImages.length > 0) {
          se.slideData = jsondata.HotelImages;
        }
        else {
          var item = { LinkImage: jsondata.Avatar }
          se.slideData.push(item);
        }
        se.lengthslide = se.slideData.length;
        se.name = jsondata.Name;
        se.json = jsondata.Rating;
        se.AvgPoint = jsondata.AvgPoint;
        se.Latitude = jsondata.Latitude;
        se.Longitude = jsondata.Longitude;
        se.Address = jsondata.Address;
        se.ischeckcombo = false;
        //load map
        //se.loadMap();
        if (jsondata.Combos) {
          se.sendRequest = false;
          se.ischeckcombo = true;

        }
        if (jsondata.ComboPromtion || jsondata.Combos) {
          se.nm = (jsondata.ComboPromtion && jsondata.ComboPromtion.Description && jsondata.ComboPromtion.Title);
          se.sendRequest = false;
          se.cocombo = 1;
          se.titlecombo = jsondata.ComboPromtion ? jsondata.ComboPromtion.Title : jsondata.Combos.Title;
          se.notecombo = jsondata.ComboPromtion ? (jsondata.ComboPromtion.Note || '') : jsondata.Combos.Note;
          se.combopriceontitle = jsondata.ComboPromtion ? jsondata.ComboPromtion.Price.toLocaleString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1.") : jsondata.Combos.Price.toLocaleString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1.");
          se.comboprice = jsondata.ComboPromtion ? jsondata.ComboPromtion.Price.toLocaleString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1.") : jsondata.Combos.Price.toLocaleString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1.");
          se.Description = jsondata.ComboPromtion ? jsondata.ComboPromtion.Description.replace(/\r\n/g, "") : jsondata.Combos.Description.replace(/\r\n/g, "");
          se.Description = se.Description.replace("Trọn gói bao gồm:", "");
          se.Description = se.Description.replace(/#r/g, "");
          se.Description = se.Description.replace(/r#/g, "");
          se.Description = se.Description.replace(/#m/g, "");
          se.Description = se.Description.replace(/m#/g, "");
          se.Description = se.Description.replace(/#n/g, "");
          se.Description = se.Description.replace(/n#/g, "");
          se.ischeckcombo = true;
          se.ComboDayNum = jsondata.Combos ? jsondata.Combos.ComboDayNum : 1;
          se.bookCombo.tolocation = jsondata.Combos ? jsondata.Combos.ArrivalCode : '';
          se.valueComboDetail = [];
          if (jsondata.ComboPromtion && jsondata.ComboPromtion.Id) {
            se.comboid = jsondata.ComboPromtion.Id;
          }
          if (jsondata.Combos && jsondata.Combos.ComboDetail) {
            se.comboid = jsondata.Combos.Id;
            se.getDetailCombo(jsondata.Combos.Id);
          }
          
        }
        //Không có description thì ẩn nội dung combo
        if (jsondata.ComboPromtion && !jsondata.ComboPromtion.Description) {
          se.ischeckcombo = false;
        }

        se.HotelReviews = jsondata.HotelReviews;
        se.HotelRelated = jsondata.HotelRelated;
        for (let index = 0; index < se.HotelRelated.length; index++) {
          //se.HotelRelated[index].Avatar = 'https:' + se.HotelRelated[index].Avatar;
          if(se.HotelRelated[index].Avatar){
            se.HotelRelated[index].Avatar = (se.HotelRelated[index].Avatar.toLocaleString().trim().indexOf("http") != -1) ? se.HotelRelated[index].Avatar : 'https:' + se.HotelRelated[index].Avatar;
          }
          else {
            se.HotelRelated[index].Avatar = "https://cdn1.ivivu.com/iVivu/2018/02/07/15/noimage.png";
          }
          
          switch (se.HotelRelated[index].Rating) {
            case 50:
              se.HotelRelated[index].Rating = "./assets/star/ic_star_5.svg";
              break;
            case 45:
              se.HotelRelated[index].Rating = "./assets/star/ic_star_4.5.svg";
              break;
            case 40:
              se.HotelRelated[index].Rating = "./assets/star/ic_star_4.svg";
              break;
            case 35:
              se.HotelRelated[index].Rating = "./assets/star/ic_star_3.5.svg";
              break;
            case 30:
              se.HotelRelated[index].Rating = "./assets/star/ic_star_3.svg";
              break;
            case 25:
              se.HotelRelated[index].Rating = "./assets/star/ic_star_2.5.svg";
              break;
            case 20:
              se.HotelRelated[index].Rating = "./assets/star/ic_star_2.svg";
              break;
            case 15:
              se.HotelRelated[index].Rating = "./assets/star/ic_star_1.5.svg";
              break;
            case 10:
              se.HotelRelated[index].Rating = "./assets/star/ic_star_1.svg";
              break;
            case 5:
              se.HotelRelated[index].Rating = "./assets/star/ic_star_0.5.svg";
              break;
            default:
              break;
          }
          //Loại dấu ',' của sublocation
          if (se.HotelRelated[index].SubLocation) {
            se.HotelRelated[index].SubLocation = se.HotelRelated[index].SubLocation.substring(0, se.HotelRelated[index].SubLocation.length - 1);
          }

        }
        se.getPriceHotelRelated();
        se.numHotelReviews = jsondata.HotelReviews.length;
        se.arrHotelReviews = [];
        if (se.numHotelReviews > 0) {
          if (se.numHotelReviews < 3) {
            se.HotelReviews[0].DateStayed = moment(se.HotelReviews[0].DateStayed).format('DD-MM-YYYY');
            se.arrHotelReviews.push(se.HotelReviews[0]);
          }
          else {
            for (let index = 0; index < 3; index++) {
              se.HotelReviews[index].DateStayed = moment(se.HotelReviews[index].DateStayed).format('DD-MM-YYYY');
              se.HotelReviews[index].ReviewPoint = Math.ceil(se.HotelReviews[index].ReviewPoint);
              se.arrHotelReviews.push(se.HotelReviews[index]);
            }
          }
        }
        for (let index = 0; index < se.slideData.length; index++) {
          if (index == 0) {
            se.imgHotel = (se.slideData[index].LinkImage.toLocaleString().trim().indexOf("http") != -1) ? se.slideData[index].LinkImage : 'https:' + se.slideData[index].LinkImage;
          }
          se.slideData[index].LinkImage = (se.slideData[index].LinkImage.toLocaleString().trim().indexOf("http") == -1) ? 'https:' + se.slideData[index].LinkImage :se.slideData[index].LinkImage ;
        }
        switch (se.json) {
          case 50:
            se.json = "./assets/star/ic_star_5.svg";
            break;
          case 45:
            se.json = "./assets/star/ic_star_4.5.svg";
            break;
          case 40:
            se.json = "./assets/star/ic_star_4.svg";
            break;
          case 35:
            se.json = "./assets/star/ic_star_3.5.svg";
            break;
          case 30:
            se.json = "./assets/star/ic_star_3.svg";
            break;
          case 25:
            se.json = "./assets/star/ic_star_2.5.svg";
            break;
          case 20:
            se.json = "./assets/star/ic_star_2.svg";
            break;
          case 15:
            se.json = "./assets/star/ic_star_1.5.svg";
            break;
          case 10:
            se.json = "./assets/star/ic_star_1.svg";
            break;
          case 5:
            se.json = "./assets/star/ic_star_0.5.svg";
            break;
          default:
            break;
        }
        se.ischeck = true;
        se.checkPriceHotelDetail().then((check)=>{
          if(check){
            se.getdataroom();
            se.zone.run(() => {
              if (jsondata.Combos) {
                se.fc = (jsondata.Combos.ComboType == "Vé Máy Bay");
                se.fs = (jsondata.Combos.ComboType == "Flash Sale");
                //se.nm = !jsondata.Combos.ComboType;
              }else{
                se.fs = false;
                se.fc = false;
              }
            }, 100)
          }else{
            se.hotelRoomClasses = [];
            se.ischeckoutofroom = false;
            se.loadcomplete = true;
            se.ischeck = true;
          }
        });
        
        // setTimeout(()=>{
        //     //Inject css shadow DOM
        //     const ionbadge = (document.querySelector('ion-slide ion-badge') as HTMLElement);

        //     if(ionbadge){
        //       const styles = '.badgescss {position: absolute; color: #ffffff; z-index: 10; margin-left: 84%; margin-top: -10%;background: rgba(0, 0, 0, 0.5);border: 0.5px solid rgba(255, 255, 255, 0.5);box-sizing: border-box;font-weight: 100;display: block;}';
        //       injectStyles(ionbadge, '.badgescss', styles);
        //     }
        // },2000)
         
      }
    })
  }

  checkPriceHotelDetail(): Promise<boolean>{
    var se = this;
    var result = true;
    
    return new Promise((resolve, reject) => {
        //resolve(result);
        var options;
        var form = {
          RoomNumber: '1',
          IsLeadingPrice: '',
          ReferenceClient: '',
          Supplier: 'IVIVU',
          CheckInDate: se.searchhotel.CheckInDate,
          CheckOutDate: se.searchhotel.CheckOutDate,
          CountryID: '',
          CityID: '',
          NationalityID: '',
          'RoomsRequest[0][RoomIndex]': '0',
          'RoomsRequest[0][Adults][value]': se.searchhotel.adult,
          'RoomsRequest[0][Child][value]': se.searchhotel.child,
          StatusMethod: '2',
          'CityCode': se.authService.region,
          CountryCode: 'VN',
          NoCache: 'false',
          SearchType: '2',
          HotelIds: se.HotelID,
          HotelIdInternal: se.HotelID
        };
        if (se.searchhotel.arrchild) {
          for (var i = 0; i < se.searchhotel.arrchild.length; i++) {
            form["RoomsRequest[0][AgeChilds][" + i + "][value]"] = + se.searchhotel.arrchild[i].numage;
          }
        }

        options = {
          method: 'POST',
          url: C.urls.baseUrl.urlContracting + '/api/contracting/HotelsSearchPriceAjax',
          timeout: 180000, maxAttempts: 5, retryDelay: 2000,
          async: true,
          headers:
            {},
          form
        };
        request(options, function (error, response, body) {
          if (response.statusCode != 200) {
            var objError = {
              page: "hoteldetail",
              func: "checkPriceHotelDetail",
              message: response.statusMessage,
              content: response.body,
              type: "warning",
              param: JSON.stringify(options)
            };
            C.writeErrorLog(objError);
            result = false;
          }
          if (error) {
            error.page = "hoteldetail";
            error.func = "checkPriceHotelDetail";
            error.param = JSON.stringify(options);
            C.writeErrorLog(error);
            result = false;
          };
            let jsonhtprice1 = JSON.parse(body);
            if (jsonhtprice1.HotelListResponse) {
              result =  true;
            }else{
              result = false;
            }
            resolve(result);
        })
    });
  }

  /***
   * Hàm load giá khách sạn liên quan
   * PDANH 15/02/2019
   */
  getPriceHotelRelated(): any {
    var se = this;
    let listhotels = "";
    let listhotelIdInternal = "";
    for (let i = 0; i < se.HotelRelated.length; i++) {
      if (i == se.HotelRelated.length - 1) {
        listhotels = listhotels+ se.HotelRelated[i].Id;
        listhotelIdInternal = listhotelIdInternal + se.HotelRelated[i].Id;
      } else {
        listhotels = listhotels+ se.HotelRelated[i].Id+ ",";
        listhotelIdInternal = listhotelIdInternal + se.HotelRelated[i].Id + ",";
      }
    }
    var options;
    var form = {
      RoomNumber: '1',
      IsLeadingPrice: '',
      ReferenceClient: '',
      Supplier: 'IVIVU',
      CheckInDate: se.searchhotel.CheckInDate,
      CheckOutDate: se.searchhotel.CheckOutDate,
      CountryID: '',
      CityID: '',
      NationalityID: '',
      'RoomsRequest[0][RoomIndex]': '0',
      'RoomsRequest[0][Adults][value]': se.searchhotel.adult,
      'RoomsRequest[0][Child][value]': se.searchhotel.child,
      StatusMethod: '2',
      'CityCode': se.authService.region,
      CountryCode: 'VN',
      NoCache: 'false',
      SearchType: '2',
      HotelIds: listhotels,
      HotelIdInternal: listhotelIdInternal
    };
    if (this.searchhotel.arrchild) {
      for (var i = 0; i < this.searchhotel.arrchild.length; i++) {
        form["RoomsRequest[0][AgeChilds][" + i + "][value]"] = + this.searchhotel.arrchild[i].numage;
      }
    }

    options = {
      method: 'POST',
      url: C.urls.baseUrl.urlContracting + '/api/contracting/HotelsSearchPriceAjax',
      timeout: 180000, maxAttempts: 5, retryDelay: 2000,
      headers:
        {},
      form
    };
    request(options, function (error, response, body) {
      if (response.statusCode != 200) {
        var objError = {
          page: "hoteldetail",
          func: "getPriceHotelRelated",
          message: response.statusMessage,
          content: response.body,
          type: "warning",
          param: JSON.stringify(options)
        };
        C.writeErrorLog(objError);
      }
      if (error) {
        error.page = "hoteldetail";
        error.func = "getPriceHotelRelated";
        error.param = JSON.stringify(options);
        C.writeErrorLog(error);
        throw new Error(error)
      };
      se.zone.run(() => {
        se.ListHotelRelatedPrice = [];
        let jsonhtprice1 = JSON.parse(body);
        if (jsonhtprice1.HotelListResponse) {
          jsonhtprice1 = jsonhtprice1.HotelListResponse.HotelList.HotelSummary;
          for (var i = 0; i < jsonhtprice1.length; i++) {
            se.ListHotelRelatedPrice.push(jsonhtprice1[i]);
          }
          //Bind giá vào list ks đã search
          setTimeout(() => {
            se.zone.run(() => se.fillDataPrice());
          }, 300);

        }
      })
    })
  }
  /**Bind lại giá nếu có giá OTA
     * PDANH 15/02/2018
     */
  fillDataPrice() {
    for (let index = 0; index < this.HotelRelated.length; index++) {
      for (let i = 0; i < this.ListHotelRelatedPrice.length; i++) {
        //Chỉ bind lại giá cho hotel, combo bỏ qua
        if (this.HotelRelated[index] && this.HotelRelated[index].Id == this.ListHotelRelatedPrice[i].HotelId) {
          this.HotelRelated[index].MinPriceOTAStr = this.ListHotelRelatedPrice[i].MinPriceOTAStr;
          this.HotelRelated[index].MinPriceTAStr = this.ListHotelRelatedPrice[i].MinPriceTAStr;
          this.HotelRelated[index].RoomNameSubString = this.ListHotelRelatedPrice[i].RoomNameSubString;
          this.HotelRelated[index].PromotionDescription = this.ListHotelRelatedPrice[i].PromotionDescription;
          this.HotelRelated[index].PromotionDescriptionSubstring = this.ListHotelRelatedPrice[i].PromotionDescriptionSubstring;
        }
      }
    }
  }
  /*
  * Hàm check item khách sạn đã tồn tại trong list json1 hay chưa: 1 = đã có; 0 - chưa có
  * @param item khách sạn cần check
  */
  checkExistsItem(id) {
    var co = 0;
    if (id) {
      for (let i = 0; i < this.HotelRelated.length; i++) {
        if (id == this.HotelRelated[i].HotelId) {
          co = 1;
          break;
        }
      }
    }

    return co;
  }



  convertWCFStringDate(strDate) {
    var matched = this.dateRegex.exec(strDate);
    if (matched) {
      var parts = matched[1].split(/[-+,.]/);
      return new Date(parts[0] ? +parts[0] : 0 - +parts[1]);
    }
  }
  /***
   * Hàm load thông tin combo khách sạn
   * PDANH 15/02/2019
   */
  getDetailCombo(comboid): any {
    var se = this;
    var optionscombo = {
      method: 'GET',
      url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/ComboDetailList?comboId=' + (comboid ? comboid : se.comboid) + '&checkin=' + moment(this.cin).format('DD-MM-YYYY') + '&checkout=' + moment(this.cout).format('DD-MM-YYYY'),
      timeout: 10000, maxAttempts: 5, retryDelay: 2000,
      headers: {
        apisecret: '2Vg_RTAccmT1mb1NaiirtyY2Y3OHaqUfQ6zU_8gD8SU',
        apikey: '0HY9qKyvwty1hSzcTydn0AHAXPb0e2QzYQlMuQowS8U',
      }
    };
    request(optionscombo, function (error, response, body) {
      if (!error) {
        //se.objDetail.push(JSON.parse(body));
        var obj = JSON.parse(body);
        //Giờ xe
        if (obj.comboDetail) {          
        se.bookCombo.transportDepartTime=obj.comboDetail.transportDepartTime;
        se.bookCombo.transportReturnTime=obj.comboDetail.transportReturnTime;
        }
        var item = obj.comboDetail;
        var itemList = obj.list;
        se.comboDetail = obj;
        se.dateofcombo = se.comboDetail.dateOfCombo;
        se.zone.run(() => {
          se.changedate = false;
          se.comboDetailList = [];
          if (item) {
            se.fc = (item.comboType == "1");
            se.fs = (item.comboType == "2");
            se.nm = (item.comboType == null);
            if (se.fs && item.availableTo) {
              let dateEnd = new Date(item.availableTo.toLocaleString());
              let dateNow = new Date(se.searchhotel.CheckInDate + " 00:00:00");
              if (moment(dateNow).diff(moment(dateEnd),'days') > 0 ) {
                se.flashSaleEndDate = moment(dateEnd).format('DD.MM.YYYY');
              }
            }
            if(se.fc && item.availableTo){
              var diffday = 1;
              if(se.comboDetail && se.comboDetail.endDate){
                //diffday = moment(new Date(se.searchhotel.CheckOutDate)).diff(moment(new Date(se.comboDetail.endDate)),'days');
                var arr = se.comboDetail.endDate.split('-');
                var newdate = new Date(arr[2],arr[1] -1,arr[0]);
                var d = moment(newdate).format('YYYY-MM-DD');
                se.allowbookcombofc = moment(se.searchhotel.CheckOutDate).diff(moment(d),'days') > 0 ? false : true;
              }
            }
            if (item.roomId && item.price) {
              //se.getdataroom();
              se.checkPriceHotelDetail().then((check)=>{
              if(check){
                se.getdataroom();
              }else{
                se.hotelRoomClasses = [];
                se.ischeckoutofroom = false;
                se.loadcomplete = true;
                se.ischeck = true;
              }
            });
              se.zone.run(() => {
                setTimeout(() => {
                  if (se.loadcomplete) {
                    if (se.jsonroom1 && se.jsonroom1.length > 0) {
                      se.jsonroom1.forEach(element => {
                        element.MealTypeRates.forEach(elementMealtype => {
                          if (elementMealtype.RoomId == item.roomId && elementMealtype.IsFlashSale) {
                            se.hasComboRoom = true;
                            se.bookCombo.Hotelid = se.HotelID;
                            se.bookCombo.roomid = elementMealtype.RoomId;
                            se.bookCombo.roomNb = se.searchhotel.roomnumber;
                            se.bookCombo.Adults = se.searchhotel.adult;
                            se.bookCombo.Child = se.searchhotel.child;
                            se.bookCombo.ChildAge = se.searchhotel.arrchild;
                            se.bookCombo.ComboRoomPrice = elementMealtype.PriceAvgPlusTAStr;
                            se.comboprice = elementMealtype.PriceAvgPlusTAStr;
                            se.loadpricecombodone = true;
                            se.warningMaxPax = elementMealtype.MSG;
                          }
                        })
                      });
                    }
                  } else {
                    setTimeout(() => {
                      if (se.loadcomplete) {
                        if (se.jsonroom1 && se.jsonroom1.length > 0) {
                          se.jsonroom1.forEach(element => {
                            element.MealTypeRates.forEach(elementMealtype => {
                              if (elementMealtype.RoomId == item.roomId && elementMealtype.IsFlashSale) {
                                se.hasComboRoom = true;
                                se.bookCombo.Hotelid = se.HotelID;
                                se.bookCombo.roomid = elementMealtype.RoomId;
                                se.bookCombo.roomNb = se.searchhotel.roomnumber;
                                se.bookCombo.Adults = se.searchhotel.adult;
                                se.bookCombo.Child = se.searchhotel.child;
                                se.bookCombo.ChildAge = se.searchhotel.arrchild;
                                se.bookCombo.ComboRoomPrice = elementMealtype.PriceAvgPlusTAStr;
                                se.comboprice = elementMealtype.PriceAvgPlusTAStr;
                                se.loadpricecombodone = true;
                                se.warningMaxPax = elementMealtype.MSG;
                              }
                            })
                          });
                        }
                      }
                    }, 3000);
                  }

                }, 3000);
              });
            }
            se.changedate = false;
          }
          else{
            se.allowbookcombofc = false;
          }
          if (itemList) {
            itemList.forEach(item => {
              se.comboDetailList.push(item);
            });
          }
        })
      } else if (error) {
        error.page = "hoteldetail";
        error.func = "getDetailCombo";
        error.param = JSON.stringify(optionscombo);
        C.writeErrorLog(error);
        throw new Error(error)
      };
      if (response.statusCode != 200) {
        var objError = {
          page: "hoteldetail",
          func: "getDetailCombo",
          message: response.statusMessage,
          content: response.body,
          type: "warning",
          param: JSON.stringify(optionscombo)
        };
        C.writeErrorLog(objError);
      }
    })
  }
  btnseemore() {
    this.HotelreviewsPage();
    //this.isbtnseemore = false;
    //this.isShow = true;

  }
  seedetail(id) {
    var self = this;
    this.arrroom = [];
    var coroom;
    for (let i = 0; i < self.jsonroom.length; i++) {
      if (id == self.jsonroom[i].value.Rooms[0].RoomID) {
        this.arrroom.push(self.jsonroom[i].value);
        coroom = self.jsonroom[i].co;
        break;
      }
    }
    var date1 = new Date(this.cin);
    var date2 = new Date(this.cout);
    var timeDiff = Math.abs(date2.getTime() - date1.getTime());
    this.duration = Math.ceil(timeDiff / (1000 * 3600 * 24));

    var value = { Address: this.Address, Name: this.name, imghotel: this.imgHotel, cin: this.cin, cout: this.cout, dur: this.duration, room: this.arrroom, adults: this.adults, child: this.child, roomnumber: this.roomvalue, coroom: coroom, texttitle: this.text };
    this.navCtrl.navigateForward('/RoomdetailPage/'+ JSON.stringify(value));
    // alert(self.arrroom);
  }
  // selectclick() {

  //   if (this.room && this.guest) {
  //     this.presentLoading5000();
  //     this.getdataroom();
  //   }

  // }
  selectclick(event, text) {
    for (let i = 0; i < this.arrchild.length; i++) {
      if (this.arrchild[i].text == text) {
        this.arrchild[i].numage = event;
        break;
      }
    }
  }
  selectclickcin() {

    this.cout = new Date(this.cin);
    var datecin = new Date(this.cin);
    this.cincombo = moment(datecin).format('YYYYMMDD');
    var res = this.cout.setTime(this.cout.getTime() + (1 * 24 * 60 * 60 * 1000));
    var date = new Date(res);
    this.cout = moment(date).format('YYYY-MM-DD');
    if (this.room && this.guest) {
      //this.presentLoading5000();
      this.ischeck = false
      this.presentLoading();
    }
  }
  selectclickout() {

    var datecin = Date.parse(this.cin);
    var datecout = Date.parse(this.cout);

    if (datecin >= datecout) {
      this.presentToastwarming('Ngày check in không lớn hơn hoặc bằng ngày check out');
    }
    else {
      if (this.room && this.guest) {
        // this.presentLoading5000();
        this.ischeck = false
        this.presentLoading();
      }
    }
  }

  async presentToastwarming(msg) {
    const toast = await this.toastCtrl.create({
      message: msg,
      duration: 3000,
      position: 'top',
    });
    toast.present();
  }

  /***
   * Hàm load thông tin phòng
   */
  async getdataroom() {
    var self = this;
    var options;
    var form = {
      CheckInDate: self.cin,
      CheckOutDate: self.cout,
      CityID: '',
      CountryID: '',
      HotelID: self.HotelID,
      IsLeadingPrice: '1',
      IsPackageRate: 'false',
      NationalityID: '82',
      ReferenceClient: '',
      RoomNumber: self.room,
      'RoomsRequest[0].RoomIndex': '1',
      Supplier: 'IVIVU',
      dataKey: '',
      'RoomsRequest[0][Adults][value]': self.adults,
      'RoomsRequest[0][Child][value]': self.child,
    };
    if (this.searchhotel.arrchild) {
      this.arrchild1=[];
      for (var i = 0; i < this.searchhotel.arrchild.length; i++) {
        // form["RoomsRequest[0][AgeChilds][" + i + "][value]"] = + this.arrchild[i].numage;
        form["RoomsRequest[0][AgeChilds][" + i + "][value]"] = + this.searchhotel.arrchild[i].numage;
        this.arrchild1.push(this.searchhotel.arrchild[i].numage);
      }
    }
    this.formParam = form;
    options = {
      method: 'POST',
      url: C.urls.baseUrl.urlContracting + '/api/contracting/HotelSearchReqContractApp',
      timeout: 10000, maxAttempts: 5, retryDelay: 2000,
      headers:
        {},
      form
    };
    request(options, function (error, response, body) {
      if (response.statusCode != 200) {
        var objError = {
          page: "hoteldetail",
          func: "getdataroom",
          message: response.statusMessage,
          content: response.body,
          type: "warning",
          param: JSON.stringify(options)
        };
        C.writeErrorLog(objError);
      }
      if (error) {
        error.page = "hoteldetail";
        error.func = "getdataroom";
        error.param = JSON.stringify(options);
        C.writeErrorLog(error);
      };
      self.zone.run(() => {
        self.loadcomplete = true;
        self.ischeck = true;
        self.jsonroom = [];
        self.jsonroom2 = JSON.parse(body);
        var result = JSON.parse(body);
        if (result.Hotels) {
          self.jsonroom1 = result.Hotels[0];
          self.jsonroom1 = self.jsonroom1.RoomClasses
        }

        if (result.Hotels && self.jsonroom1) {
          for (let index = 0; index < self.jsonroom1.length; index++) {
            var str = self.jsonroom1[index].Rooms[0].Images;
            var res = str.substr(0, 4);
            if (res != "http") {
              //self.jsonroom1[index].Rooms[0].ImagesMaxWidth320 = 'https:' + self.jsonroom1[index].Rooms[0].ImagesMaxWidth320;
              self.jsonroom1[index].Rooms[0].ImagesMaxWidth320 = (self.jsonroom1[index].Rooms[0].ImagesMaxWidth320.toLocaleString().trim().indexOf("http") == -1) ? 'https:' + self.jsonroom1[index].Rooms[0].ImagesMaxWidth320 : self.jsonroom1[index].Rooms[0].ImagesMaxWidth320 ;
            }
            self.num = Number(self.room) * Number(self.jsonroom1[index].Rooms[0].MaxAdults);
            var MaxChils = Number(self.room) * Number(self.jsonroom1[index].Rooms[0].MaxChils);
            var checkpax = Number(self.room) * Number(self.jsonroom1[index].Rooms[0].MaxPax);
            var total = self.adults + self.child;
            let tempnumtarget;
            var roomco = 0;
            let PriceAvgPlusTAStr;
            var copax = 0;
            var numtarget;
            if (self.num < self.adults || self.child > MaxChils) {
              roomco = 1;
              tempnumtarget = Number(self.adults) / Number(self.jsonroom1[index].Rooms[0].MaxAdults)
              numtarget = Math.ceil(tempnumtarget);
              for (let i = 0; i < self.jsonroom1[index].MealTypeRates.length; i++) {
                PriceAvgPlusTAStr = numtarget * self.jsonroom1[index].MealTypeRates[i].PriceAvgPlusTotalTA
                self.jsonroom1[index].MealTypeRates[i].PriceAvgPlusTAStr = PriceAvgPlusTAStr.toLocaleString();
              }
              copax = 1;
            }
            else if (copax == 0) {
              if (checkpax < total) {
                roomco = 1;
                tempnumtarget = Number(total) / Number(checkpax)
                numtarget = Math.ceil(tempnumtarget);
                for (let i = 0; i < self.jsonroom1[index].MealTypeRates.length; i++) {
                  PriceAvgPlusTAStr = numtarget * self.jsonroom1[index].MealTypeRates[i].PriceAvgPlusTotalTA
                  self.jsonroom1[index].MealTypeRates[i].PriceAvgPlusTAStr = PriceAvgPlusTAStr.toLocaleString();
                }
              }

            }
            var itemroom = { value: self.jsonroom1[index], co: roomco, numtarget: numtarget }
            self.jsonroom.push(itemroom);
          }
          //Load roomdetail
          var result = JSON.parse(body);
          if (result.Hotels) {
            self.hotelRooms = [];
            self.hotelRoomClasses = [];
            self.hotelRooms = result.Hotels[0];
            result.Hotels[0].RoomClasses.forEach((element, index) => {
              self.hotelRoomClasses.push(element);
            });
          } else {
            self.hotelRoomClasses = [];
          }
        }
        else {
          self.hotelRoomClasses = [];
          self.ischeckoutofroom = false;
        }
        //Kiểm tra load lần đầu thì logevent
        if(self.jsonroom1.RoomClasses && self.jsonroom1.RoomClasses.length >0){
          let roominfo = self.jsonroom1.RoomClasses[0].MealTypeRates[0];
          //google analytic
          self.gf.googleAnalytion('hoteldetail','Content View',self.hotelDetail[0].code+'/cin:'+this.cin+'/cout:'+this.cout+'/adults:'+this.adults+'/child:'+this.child+ '/'+roominfo.RoomName+':'+roominfo.PriceAvgPlusTAStr);
        }
      });
    })

  }

  DescriptionPage() {
    this.navCtrl.navigateForward('/hoteldescription/' + this.HotelID+'/'+this.hotelname);
  }
  HotelreviewsPage() {
    this.navCtrl.navigateForward('/hotelreviews/'+this.HotelID+'/'+this.hotelname);
  }
  FacilitiesPage() {
    this.navCtrl.navigateForward('/facilities/' +this.HotelID+'/'+this.hotelname);
  }
  PolicyPage() {
    this.navCtrl.navigateForward('/policy/'+this.HotelID+'/'+this.hotelname);
  }
  async presentAlertbook() {
    const alertController = document.querySelector('ion-alert-controller');
    await alertController.componentOnReady();

    let alert = await this.alertCtrl.create({
      message: 'Phòng cuối cùng vừa được đặt. Quý khách vui lòng chọn ngày khác.',
      buttons: ['Ok']
    });
    alert.present();
  }

  book(id, MealTypeRates, indexme, roomName, indexroom) {
    this.presentLoadingNew();
    var self = this;
    // if (this.jsonroom[indexroom].numtarget) {
    //   this.roomvalue = this.jsonroom[indexroom].numtarget;
    // }
    // else {
      this.roomvalue = this.room;
   // }
    this.arrroom = [];
    for (let i = 0; i < self.hotelRoomClasses.length; i++) {
      if (id == self.hotelRoomClasses[i].Rooms[0].RoomID) {
        this.arrroom.push(self.hotelRoomClasses[i]);
        this.indexroom = i;
        break;
      }
    }
    //console.log(this.arrroom);
    var date1 = new Date(this.cin);
    var date2 = new Date(this.cout);
    var timeDiff = Math.abs(date2.getTime() - date1.getTime());
    this.duration = Math.ceil(timeDiff / (1000 * 3600 * 24));
    this.storage.get('email').then(email => {
      if (email) {
        this.booking.CheckInDate = this.cin;
        this.booking.CheckOutDate = this.cout,
          this.booking.roomNb = this.room,
          this.booking.Adults = this.adults,
          this.booking.Child = this.child,
          this.booking.CName = '',
          this.booking.CEmail = email,
          this.booking.cost = MealTypeRates.PriceAvgPlusTAStr,
          this.booking.indexroom = this.indexroom,
          this.booking.indexmealtype = indexme,
          // this.booking.ChildAge = this.arrchild1,
          this.booking.HotelId = this.HotelID,
          this.Roomif.RoomId = id,
          this.booking.HotelName = self.name,
          this.booking.RoomName = roomName,
          this.Roomif.Address = this.Address,
          this.Roomif.dur = this.duration,
          this.Roomif.arrroom = this.arrroom,
          this.Roomif.roomnumber = this.roomvalue,
          this.Roomif.roomtype = MealTypeRates,
          this.Roomif.jsonroom = this.jsonroom2.Hotels[0],
          this.Roomif.imgHotel = this.imgHotel;
          this.Roomif.HotelRoomHBedReservationRequest=JSON.stringify(this.arrroom[0].HotelRoomHBedReservationRequest);
        this.Roomif.arrrbed = [];
        this.Roomif.imgRoom = this.arrroom[0].Rooms[0].ImagesMaxWidth320;
        this.searchhotel.adult = this.adults;
        this.searchhotel.child = this.child;
        // this.searchhotel.arrchild = this.arrchild1;
        this.searchhotel.roomnumber = this.room;
        this.searchhotel.CheckInDate = this.cin;
        this.searchhotel.CheckOutDate = this.cout;
        this.booking.code = this.objDetail.Code;
        if (this.arrroom[0].MealTypeRates[indexme].Supplier == 'Internal') {
          var options = {
            method: 'GET',
            url: C.urls.baseUrl.urlContracting + '/api/toolsapi/CheckAllotment',
            qs:
            {
              token: '3b760e5dcf038878925b5613c32615ea3',
              hotelcode: this.booking.HotelId,
              roomcode: this.Roomif.RoomId,
              checkin: this.booking.CheckInDate,
              checkout: this.booking.CheckOutDate,
              totalroom: this.Roomif.roomnumber
            },
            headers:
              {}
          };
          request(options, function (error, response, body) {
            if (response.statusCode != 200) {
              var objError = {
                page: "hoteldetail",
                func: "book",
                message: response.statusMessage,
                content: response.body,
                type: "warning",
                param: JSON.stringify(options)
              };
              C.writeErrorLog(objError);
            }
            if (error) {
              error.page = "hoteldetail";
              error.func = "book";
              error.param = JSON.stringify(options);
              C.writeErrorLog(error);
              throw new Error(error)
            };
            var Hotelid={id:self.HotelID}
            var rs = JSON.parse(body);
            if (rs.Msg == "AL") {
              self.Roomif.payment = rs.Msg;
              // console.log(self.Roomif.payment);
              self.navCtrl.navigateForward('roomdetailreview')
            } else if (rs.Msg == "RQ") {
              self.Roomif.payment = rs.Msg;
              // console.log(self.Roomif.payment);
              self.navCtrl.navigateForward('roomdetailreview')
            }
            else {
              // console.log(self.Roomif.payment);
              self.presentAlertbook();
            }
          });
        }
        else {
          // console.log(this.arrroom[0].Rooms[0].Penaltys[0].IsPenaltyFree);
          this.Roomif.arrrbed = this.arrroom[0].MealTypeRates[indexme].BedTypes;
          self.Roomif.payment = this.arrroom[0].MealTypeRates[indexme].Penaltys[0].IsPenaltyFree;
          self.navCtrl.navigateForward('roomdetailreview');
        }
      }
    })
    //google analytic
    if(self.objDetail.Code){
      self.gf.googleAnalytion('book','Initiated Checkout','hotelid:'+self.objDetail.Code+'/cin:'+self.cin+'/cout:'+self.cout+'/adults:'+self.adults+'/child:'+self.child+'/roomnumber:'+ self.roomvalue+ '/price:'+MealTypeRates.PriceAvgPlusTAStr);
    }
  }
 
async bookcombo() {
    this.storage.get('email').then(email => {
      if (email) {
        //Gọi popup gửi yêu cầu
        this.bookCombo.Email = email;
        this.bookCombo.Address = this.Address;
        // const modal: HTMLIonModalElement = await this.modalCtrl.create('RequestComboPage');
        // modal.present();
      }
    })
    //google analytic
    this.gf.googleAnalytion('hoteldetail','bookcombo','');
    // var item = { namecombo: this.titlecombo, ComboDayNum: this.ComboDayNum, cin: this.cin, imghotel: this.imgHotel, namehotel: this.name, Address: this.Address };
    // this.navCtrl.push('CombochoosedeparturetimePage', item);
  }
  btnclick() {
    this.ischeckbtn = false;
    this.ischeckbtnreset = true;
    this.navCtrl.back();
  }
  btnclick1() {
    this.ischeckbtn = true;
    this.ischeckbtnreset = false;

  }
  goback() {
    this.isexit = true;
    this.searchhotel.isRefreshDetail = false;
    this.searchhotel.showPopup = false;
    if (this.searchhotel.rootPage == "mainpage" || this.searchhotel.rootPage == "topdeal" ) {
      this.navCtrl.navigateBack('/');
    }
    // else if(this.searchhotel.rootPage == "roompaymentselect")
    // {
    //   this.navCtrl.navigateBack('/');
    // }
    else {
      if(this.searchhotel.rootPage == "listpage"){
        this.navCtrl.navigateBack('/hotellist/false');
      }
      else if(this.searchhotel.rootPage == "likepage"){
        this.navCtrl.navigateBack('/tabs/tab2');
      }
      else if(this.searchhotel.rootPage == "listmood"){
        let hotellistmoodparams = this.gf.getParams('hotellistmood')
        if(hotellistmoodparams){
          this.navCtrl.navigateBack('/hotellistmood/'+hotellistmoodparams.moodid+'/'+hotellistmoodparams.title);
        }else{
          this.navCtrl.back();
        }
        
      }else{
        this.navCtrl.navigateBack('/');
      }
    }
  }
  /***
   * Hàm click vào row khách sạn liên quan
   * PDANH 15/02/2019
   */
  itemHotelRelated(id) {
    var se = this;
    se.flag = 1;
    se.isheader1 = true;
    se.presentLoadingRelated(3000);
    se.zone.run(() => {
      se.HotelID = id;
      se.searchhotel.isRefreshDetail = true;
      se.searchhotel.hotelID = id;
      se.presentLoading();
        se.content.scrollToTop(300);
          let el = document.getElementsByClassName('div-float-arrow');
          if(el.length >0){
              el[0].classList.remove('float-arrow-enabled');
              el[0].classList.add('float-arrow-disabled');
            }
    })
    //google analytic
    se.gf.googleAnalytion('hoteldetail','hotelrelatedclick','');
  }
  // add value KH
  plusadults() {
    this.adults1++;
    if (this.adults1 == 1) {
      this.ischeckadults = false;
    }
    else {
      this.ischeckadults = true;
    }
  }
  minusadults() {
    if (this.adults1 > 1) {
      this.adults1--;
    }
    if (this.adults1 == 1) {
      this.ischeckadults = false;
    }
    else {
      this.ischeckadults = true;
    }


  }
  pluschild() {
    this.child1++;
    var arr = { text: 'Trẻ em' + ' ' + this.child1, numage: "7" }
    this.arrchild2.push(arr);
    if (this.child1 == 0) {
      this.ischeckchild = false;
    }
    else {
      this.ischeckchild = true;
    }

  }
  minuschild() {
    if (this.child1 > 0) {
      this.child1--;
      this.arrchild2.splice(this.arrchild2.length - 1, 1);
    }
    if (this.child1 == 0) {
      this.ischeckchild = false;
    }
    else {
      this.ischeckchild = true;
    }
  }
  minusroom() {
    if (this.room1 > 1) {
      this.room1--;
    }
    if (this.room1 == 1) {
      this.ischeckroom = false;
    } else {
      this.ischeckroom = true;
    }
  }
  plusroom() {
    this.room1++;
    if (this.room1 == 1) {
      this.ischeckroom = false;
    } else {
      this.ischeckroom = true;
    }
  }
  async presentAlert(msg, PenaltyDateParseStr) {
    let alert = await this.alertCtrl.create({
      message: 'Yêu cầu hủy/thay đổi phòng nhận được từ: ' + msg + '',
      buttons: ['Ok']
    });
    alert.present();
  }

  getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
    var R = 6371; // Radius of the earth in km
    var dLat = this.deg2rad(lat2 - lat1);  // deg2rad below
    var dLon = this.deg2rad(lon2 - lon1);
    var a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2)
      ;
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c; // Distance in km
    return d;
  }

  deg2rad(deg) {
    return deg * (Math.PI / 180)
  }
  /***
   * Next trên slide
   */
  test() {
    this.slider.getActiveIndex().then(index=>{
      this.hotelimg = this.slideData[index].LinkImage;
      this.coutslide = index + 1;
    });
    
    let elements = document.querySelectorAll(".grad1");
    if (elements != null) {
      // debugger
    }
  }

  /***
   * Mở page chọn lịch
   * PDANH 15/02/2019
   */
  openPickupCalendar() {
    this.zone.run(() => {
      this.loadcomplete = false;
      this.hotelRoomClasses = [];
    });
    this.searchhotel.CheckInDate = this.cin;
    this.searchhotel.CheckOutDate = this.cout;
    //Xóa clone page-searchhotel do push page
    //this.clearClonePage("page-pickup-calendar");
    //this.navCtrl.navigateForward('/pickup-calendar/true');
  }
  clearClonePage(pagename) {
    //Xóa clone do push page
    let elements = [];
    elements = Array.from(document.querySelectorAll(pagename));
    if (elements != null && elements.length > 0) {
      elements.forEach(el => {
        if (el != null && el.length > 0) {
          el.remove();
        }
      });
    }
  }
  /***
   * Share link hotel
   * PDANH 15/02/2019
   */
  share() {
    this.socialSharing.share(null, null, null, this.hotelurl).then(() => {
      // Success!
    }).catch(() => {
      // Error!
    });
  }
  /***
   * Cập nhật like của hotel
   * PDANH 15/02/2019
   */
  updateLikeStatus(data) {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'GET',
          url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/GetFavouriteHotelByUser',
          timeout: 10000, maxAttempts: 5, retryDelay: 2000,
          headers:
          {
            //'postman-token': '89692e55-6555-1572-db28-4becc311f0ba',
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            authorization: text
          }
        };
        request(options, function (error, response, body) {
          if (response.statusCode != 200) {
            var objError = {
              page: "hoteldetail",
              func: "updateLikeStatus",
              message: response.statusMessage,
              content: response.body,
              type: "warning",
              param: JSON.stringify(options)
            };
            C.writeErrorLog(objError);
          }
          if (error) {
            error.page = "hoteldetail";
            error.func = "updateLikeStatus";
            error.param = JSON.stringify(options);
            C.writeErrorLog(error);
          } else {
            if (body) {
              se.zone.run(() => {
                se.dataListLike = JSON.parse(body);
                let like = false;
                //Kiểm tra có trong list like không
                if (se.dataListLike.length > 0) {
                  like = se.checkItemLiked(se.HotelID) == 1 ? true : false;
                }
                se.itemlike = like;
              });
            } else {
              se.showConfirm();
            }
          }

        });
      }
    });

  }
  /***
   * Hàm check hotel like/unlike
   * PDANH 15/02/2019
   */
  checkItemLiked(id) {
    var co = 0;
    if (id) {
      for (let i = 0; i < this.dataListLike.length; i++) {
        if (this.dataListLike.indexOf(id) != -1) {
          co = 1;
          break;
        }
      }
    }

    return co;
  }
  /*** Set like item
   * PDANH  29/01/2018
   */
  likeItem() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'POST',
          url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/AddFavouriteHotel',
          timeout: 10000, maxAttempts: 5, retryDelay: 2000,
          headers:
          {
            'postman-token': '9fd84263-7323-0848-1711-8022616e1815',
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            authorization: text
          },
          body: { hotelId: se.HotelID },
          json: true
        };
        request(options, function (error, response, body) {
          if (response.statusCode != 200) {
            var objError = {
              page: "hoteldetail",
              func: "likeItem",
              message: response.statusMessage,
              content: response.body,
              type: "warning",
              param: JSON.stringify(options)
            };
            C.writeErrorLog(objError);
          }
          if (error) {
            error.page = "hoteldetail";
            error.func = "likeItem";
            error.param = JSON.stringify(options);
            C.writeErrorLog(error);
          };
          se.zone.run(() => {
            setTimeout(() => {
              se.itemlike = true;
            }, 10)
          })
        });
      }
      else {
        se.valueGlobal.logingoback = 'TabPage';
        se.navCtrl.navigateForward('/login');
      }
    });
    //google analytic
    se.gf.googleAnalytion('hoteldetail','likeitem','');
  }
  /*** Set unlike item
   * PDANH  29/01/2018
   */
  unlikeItem() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'POST',
          url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/RemoveFavouriteHotelByUser',
          timeout: 10000, maxAttempts: 5, retryDelay: 2000,
          headers:
          {
            'postman-token': 'a19ecc0a-cb83-4dd9-3fd5-71062937a931',
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            authorization: text
          },
          body: { hotelId: se.HotelID },
          json: true
        };

        request(options, function (error, response, body) {
          if (response.statusCode != 200) {
            var objError = {
              page: "hoteldetail",
              func: "likeItem",
              message: response.statusMessage,
              content: response.body,
              type: "warning",
              param: JSON.stringify(options)
            };
            C.writeErrorLog(objError);
          }
          if (error) {
            error.page = "hoteldetail";
            error.func = "unlikeItem";
            error.param = JSON.stringify(options);
            C.writeErrorLog(error);
          };
          se.zone.run(() => {
            setTimeout(() => {
              se.itemlike = false;
            }, 10)
          })
        });
      }
      else {
        se.valueGlobal.logingoback = 'TabPage';
        se.navCtrl.navigateForward('/login');
      }
    });
    //google analytic
    se.gf.googleAnalytion('hoteldetail','unlikeitem','');
  }
  /*** Show popup  chi tiết khách sạn
   * PDANH  18/02/2018
   */
  showRoomDetail(obj) {
    let param = {
      hoteldetail: obj
    };
    this.searchhotel.showPopup = true;
    this.gf.setParams(obj,'hotelroomdetail');
    this.navCtrl.navigateForward('/hotelroomdetail/'+this.HotelID);
    // let modal = this.modalCtrl.create('HotelRoomDetailPage', param);
    // modal.present();
    //google analytic
    //this.gf.googleAnalytion('hoteldetail','showroomdetail','');
  }
  /*** Xử lý refresh data khi người dùng đổi ngày checkin,checkout
   * PDANH  18/02/2018
   */
  async changeDate() {
    this.zone.run(() => {
      this.loadpricecombodone = false;
      this.loadcomplete = false;
      this.hotelRoomClasses = [];
      this.flashSaleEndDate = null;
      });
    //this.navCtrl.navigateForward('/pickup-calendar/true');
    let fromdate = new Date(this.searchhotel.CheckInDate ? this.searchhotel.CheckInDate : this.cin);
    let todate = new Date(this.searchhotel.CheckOutDate ? this.searchhotel.CheckOutDate : this.cout);
      const options: CalendarModalOptions = {
        pickMode: 'range',
        title: 'Chọn ngày',
        monthFormat: 'MM / YYYY', 
        weekdays:['CN','T2','T3','T4','T5','T6','T7'],
        closeLabel:'Thoát',
        doneLabel: 'OK',
        step: 0,
        defaultScrollTo: fromdate,
        defaultDateRange: {from: fromdate, to: todate}
      };
  
      const myCalendar = await this.modalCtrl.create({
        component: CalendarModal,
        componentProps: { options }

      });
  
      myCalendar.present();
      let se = this;
      const event: any = await myCalendar.onDidDismiss();
      if(event.data){
        const date = event.data;
        const from: CalendarResult = date.from;
        const to: CalendarResult = date.to;
        
          se.searchhotel.CheckInDate = moment(from.dateObj).format('YYYY-MM-DD');
          se.searchhotel.CheckOutDate = moment(to.dateObj).format('YYYY-MM-DD');
      }
          se.zone.run(()=>{
            if(se.searchhotel.CheckInDate && se.searchhotel.CheckOutDate){
              se.cin = se.searchhotel.CheckInDate;
              se.cout = se.searchhotel.CheckOutDate;
              se.datecin = new Date(se.searchhotel.CheckInDate);
              se.datecout = new Date(se.searchhotel.CheckOutDate);
              se.cindisplay = moment(se.datecin).format('DD-MM-YYYY');
              se.coutdisplay = moment(se.datecout).format('DD-MM-YYYY');
              var date1 = new Date(se.cin);
              var date2 = new Date(se.cout);
              var timeDiff = Math.abs(date2.getTime() - date1.getTime());
              se.duration = Math.ceil(timeDiff / (1000 * 3600 * 24));
            }
            
            se.changedate = true;
            se.hasComboRoom = false;
            se.comboprice = se.combopriceontitle;
            se.showpopup = true;
            se.ischeck = true;
            se.guest = se.adults + se.child;
            if (se.comboid) {
              se.getDetailCombo(se.comboid);
            }
            se.checkPriceHotelDetail().then((check)=>{
              if(check){
                se.getdataroom();
              }else{
                se.hotelRoomClasses = [];
                se.ischeckoutofroom = false;
                se.loadcomplete = true;
                se.ischeck = true;
              }
            });
        })
      
    //google analytic
    se.gf.googleAnalytion('hoteldetail','changedate','');
  }

  changeHotel() {
    this.goback();
  }
  /*** Xử lý lấy detailcombo khi người dùng nhấn lấy giá combo
   * PDANH  18/02/2018
   */
  checkComboPrice() {
    this.getDetailCombo(null);
  }
  /*** Ẩn hiện popup chính sách phạt
   * PDANH  18/02/2018
   */
  penaltySelected(index) {
    if (this.penaltyItemSelected >= 0) {
      this.penaltyItemSelected = -1;
    } else {
      this.penaltyItemSelected = index;
    }
  }
  /*** Về trang login
   * PDANH  18/02/2018
   */
  goToLogin() {
    this.storage.get('auth_token').then(auth_token => {
      if (!auth_token) {
        this.valueGlobal.logingoback = 'TabPage';
        this.navCtrl.navigateForward('/login');
      }
    });
  }
  /*** Xử lý yêu cầu đặt combo
   * PDANH  22/02/2018
   */
  async requestCombo(value) {
    this.searchhotel.showPopup = true;
    //Gọi popup gửi yêu cầu
    this.bookCombo.Address = this.Address;
    this.bookCombo.ComboId = this.comboid;
    if (value == 1) {
      this.bookCombo.isFlightCombo = true;
      this.bookCombo.isFlashSale = false;
      this.bookCombo.isNormalCombo = false;
    }
    if (value == 2) {
      this.bookCombo.isFlashSale = true;
      this.bookCombo.isFlightCombo =false;
      this.bookCombo.isNormalCombo = false;
    }
    if (value == 3) {
      this.bookCombo.isNormalCombo = true;
      this.bookCombo.isFlashSale = false;
      this.bookCombo.isFlightCombo = false;
    }
    // let modal = this.modalCtrl.create('RequestComboPage');
    // modal.present();
    var diffday = 1;
    if(this.comboDetail && this.comboDetail.endDate){
      //diffday = moment(new Date(this.searchhotel.CheckOutDate)).diff(moment(new Date(this.comboDetail.endDate)),'days');
      var arr = this.comboDetail.endDate.split('-');
      var newdate = new Date(arr[2],arr[1] -1,arr[0]);
      var d = moment(newdate).format('YYYY-MM-DD');
      diffday = moment(this.searchhotel.CheckOutDate).diff(moment(d),'days');
    }
    //Combo vé máy bay
    if(value == 1 && this.usermail && this.dateofcombo == this.duration+1 && ( diffday <= 0) ){
        if(this.comboDetail.list.length == 3){
          let actionSheet = await this.actionsheetCtrl.create({
            cssClass: 'action-sheets-basic-page',
            header: 'Khởi hành từ',
            buttons: [
              {
                text: this.comboDetail.list[0].departureName,
                handler: () => {
                  this.choiceFlightDeparture(this.comboDetail.list[0]);
                }
              },
              {
                text: this.comboDetail.list[1].departureName,
                handler: () => {
                  this.choiceFlightDeparture(this.comboDetail.list[1]);
                }
              },
              {
                text: this.comboDetail.list[2].departureName,
                handler: () => {
                  this.choiceFlightDeparture(this.comboDetail.list[2]);
                }
              },
            ]
          });
          actionSheet.present();
        }
        else if(this.comboDetail.list.length == 2){
          let actionSheet = await this.actionsheetCtrl.create({
            cssClass: 'action-sheets-basic-page',
            header: 'Khởi hành từ',
            buttons: [
              {
                text: this.comboDetail.list[0].departureName,
                handler: () => {
                  this.choiceFlightDeparture(this.comboDetail.list[0]);
                }
              },
              {
                text: this.comboDetail.list[1].departureName,
                handler: () => {
                  this.choiceFlightDeparture(this.comboDetail.list[1]);
                }
              },
            ]
          });
          actionSheet.present();
        }else if(this.comboDetail.list.length == 1){
          let actionSheet = await this.actionsheetCtrl.create({
            cssClass: 'action-sheets-basic-page',
            header: 'Khởi hành từ',
            buttons: [
              {
                text: this.comboDetail.list[0].departureName,
                handler: () => {
                  this.choiceFlightDeparture(this.comboDetail.list[0]);
                }
              }
            ]
          });
          actionSheet.present();
        }else{
          this.choiceFlightDeparture(this.comboDetail);
        }
      }
      else if(value==2)
      {
        this.searchhotel.roomnumber=this.searchhotel.roomnumber ? this.searchhotel.roomnumber : this.room;
        const modal: HTMLIonModalElement =
        await this.modalCtrl.create({
          component: RequestCombo1Page,
          componentProps: {
            aParameter: true,
          }
        });
      modal.present();
      //this.navCtrl.navigateForward('/requestcombo');;

      modal.onDidDismiss().then((data: OverlayEventDetail) => {
        var se = this;
        if(se.searchhotel.CheckInDate && new Date(se.cin).toLocaleDateString() != new Date(se.searchhotel.CheckInDate).toLocaleDateString()){
          se.zone.run(() => {
            //this.getDetailCombo(null);
              se.cin = se.searchhotel.CheckInDate;
              se.cout = se.searchhotel.CheckOutDate;
              se.datecin = new Date(se.searchhotel.CheckInDate);
              se.datecout = new Date(se.searchhotel.CheckOutDate);
              se.cindisplay = moment(se.datecin).format('DD-MM-YYYY');
              se.coutdisplay = moment(se.datecout).format('DD-MM-YYYY');
              se.changedate = true;
              se.hasComboRoom = false;
              se.comboprice = se.combopriceontitle;
              se.showpopup = true;
              se.ischeck = true;
              se.loadcomplete = false;
              se.guest = se.searchhotel.adult + se.searchhotel.child;
              se.room = se.searchhotel.roomnumber;
            if(se.comboid){
              se.getDetailCombo(se.comboid);
            }
            //se.getdataroom();
              se.checkPriceHotelDetail().then((check)=>{
                if(check){
                  se.getdataroom();
                }else{
                  se.hotelRoomClasses = [];
                  se.ischeckoutofroom = false;
                  se.loadcomplete = true;
                  se.ischeck = true;
                }
              });
            })
            if(se.hotelDetail && se.hotelDetail.length >0){
              //google analytic
              se.gf.googleAnalytion('requestcombo1','Initiated Checkout','comboid:'+se.comboid+'/'+se.hotelDetail[0].code+'/cin:'+se.cin+'/cout:'+se.cout+'/adults:'+se.adults+'/child:'+se.child+ '/price:'+se.comboprice);
            }
        }else{
          if(se.searchhotel.adult){
            se.guest = se.searchhotel.adult + se.searchhotel.child;
          }
          
          if(se.searchhotel.roomnumber){
            se.room = se.searchhotel.roomnumber;
          }
          
        }
      })
      }
      else{
          if(this.searchhotel.CheckInDate && this.searchhotel.CheckOutDate){
            this.bookCombo.CheckInDate = this.searchhotel.CheckInDate;
            this.bookCombo.CheckOutDate = this.searchhotel.CheckOutDate;
          }
          this.bookCombo.ComboDetail = this.comboDetail;
          const modal: HTMLIonModalElement =
          await this.modalCtrl.create({
            component: RequestComboPage,
            componentProps: {
              aParameter: true,
            }
          });
        modal.present();
        //this.navCtrl.navigateForward('/requestcombo');;

        modal.onDidDismiss().then((data: OverlayEventDetail) => {
          var se = this;
          if(se.searchhotel.CheckInDate && new Date(se.cin).toLocaleDateString() != new Date(se.searchhotel.CheckInDate).toLocaleDateString()){
            se.zone.run(() => {
              //this.getDetailCombo(null);
              se.cin = se.searchhotel.CheckInDate;
              se.cout = se.searchhotel.CheckOutDate;
              se.datecin = new Date(se.searchhotel.CheckInDate);
              se.datecout = new Date(se.searchhotel.CheckOutDate);
              se.cindisplay = moment(se.datecin).format('DD-MM-YYYY');
              se.coutdisplay = moment(se.datecout).format('DD-MM-YYYY');
              se.changedate = true;
              se.hasComboRoom = false;
              se.comboprice = se.combopriceontitle;
              se.showpopup = true;
              se.ischeck = true;
              se.loadcomplete = false;
              se.guest = se.searchhotel.adult + se.searchhotel.child;
              se.room = se.searchhotel.roomnumber;
              //se.scrollToTopwithvalue1();
              if(se.comboid){
                se.getDetailCombo(se.comboid);
              }
              //se.getdataroom();
              se.checkPriceHotelDetail().then((check)=>{
                if(check){
                  se.getdataroom();
                }else{
                  se.hotelRoomClasses = [];
                  se.ischeckoutofroom = false;
                  se.loadcomplete = true;
                  se.ischeck = true;
                }
              });
              })
              if(se.hotelDetail && se.hotelDetail.length >0){
                //google analytic
                se.gf.googleAnalytion('requestcombo','Initiated Checkout','comboid:'+se.comboid+'/'+se.hotelDetail[0].code+'/cin:'+se.cin+'/cout:'+se.cout+'/adults:'+se.adults+'/child:'+se.child+ '/price:'+se.comboprice);
              }
          }else{
            if(se.searchhotel.adult){
              se.guest = se.searchhotel.adult + se.searchhotel.child;
            }
            
            if(se.searchhotel.roomnumber){
              se.room = se.searchhotel.roomnumber;
            }
            
          }
        })
    }
  }

  async sendRequestCombo(){

    this.bookCombo.Address = this.Address;
    this.bookCombo.ComboId = this.comboid;
      this.bookCombo.isFlightCombo = true;
      this.bookCombo.isFlashSale = false;
      this.bookCombo.isNormalCombo = false; 
      this.bookCombo.ComboDetail = this.comboDetail;
    const modal: HTMLIonModalElement =
          await this.modalCtrl.create({
            component: RequestComboPage
          });
        modal.present();

        modal.onDidDismiss().then((data: OverlayEventDetail) => {
          var se = this;
          if(se.searchhotel.CheckInDate && new Date(se.cin).toLocaleDateString() != new Date(se.searchhotel.CheckInDate).toLocaleDateString()){
            se.zone.run(() => {
              //this.getDetailCombo(null);
              se.cin = se.searchhotel.CheckInDate;
              se.cout = se.searchhotel.CheckOutDate;
              se.datecin = new Date(se.searchhotel.CheckInDate);
              se.datecout = new Date(se.searchhotel.CheckOutDate);
              se.cindisplay = moment(se.datecin).format('DD-MM-YYYY');
              se.coutdisplay = moment(se.datecout).format('DD-MM-YYYY');
              se.changedate = true;
              se.hasComboRoom = false;
              se.comboprice = se.combopriceontitle;
              se.showpopup = true;
              se.ischeck = true;
              se.loadcomplete = false;
              se.guest = se.searchhotel.adult + se.searchhotel.child;
              se.room = se.searchhotel.roomnumber ? se.searchhotel.roomnumber : se.room;
              //se.scrollToTopwithvalue1();
              if(se.comboid){
                se.getDetailCombo(se.comboid);
              }
              //se.getdataroom();
              se.checkPriceHotelDetail().then((check)=>{
                if(check){
                  se.getdataroom();
                }else{
                  se.hotelRoomClasses = [];
                  se.ischeckoutofroom = false;
                  se.loadcomplete = true;
                  se.ischeck = true;
                }
              });
              })
              if(se.hotelDetail && se.hotelDetail.length >0){
                //google analytic
                se.gf.googleAnalytion('requestcombo','Initiated Checkout','comboid:'+se.comboid+'/'+se.hotelDetail[0].code+'/cin:'+se.cin+'/cout:'+se.cout+'/adults:'+se.adults+'/child:'+se.child+ '/price:'+se.comboprice);
              }
          }else{
            if(se.searchhotel.adult){
              se.guest = se.searchhotel.adult + se.searchhotel.child;
            }
            
            if(se.searchhotel.roomnumber){
              se.room = se.searchhotel.roomnumber;
            }
            
          }
        })
  }

  choiceFlightDeparture(combodetail: any): any {
    //this.presentLoadingNew();
      var self = this;
      self.roomvalue = self.room;
      self.arrroom = [];
      var objMealTypeRates:any;
      var strroomname="";
      for (let i = 0; i < self.hotelRoomClasses.length; i++) {
        if (combodetail.details[0].roomId == self.hotelRoomClasses[i].Rooms[0].RoomID) {
          self.arrroom.push(self.hotelRoomClasses[i]);
          self.indexroom = i;
          objMealTypeRates = self.hotelRoomClasses[i].MealTypeRates;
          strroomname = self.hotelRoomClasses[i].ClassName;
          break;
        }
      }
      var date1 = new Date(self.searchhotel.CheckInDate);
      var date2 = new Date(self.searchhotel.CheckOutDate);
      var timeDiff = Math.abs(date2.getTime() - date1.getTime());
      self.duration = Math.ceil(timeDiff / (1000 * 3600 * 24));
          self.booking.CheckInDate = self.searchhotel.CheckInDate;
          self.booking.CheckOutDate = self.searchhotel.CheckOutDate,
            self.booking.roomNb = self.room,
            self.booking.Adults = self.adults,
            self.booking.Child = self.child,
            self.booking.CName = '',
            self.booking.CEmail = self.usermail,
            self.booking.cost = combodetail.details[0].totalPriceSale,
            self.booking.indexroom = self.indexroom,
            self.booking.ChildAge = self.arrchild1,
            self.booking.HotelId = self.HotelID,
            self.Roomif.RoomId = self.bookCombo.roomid,
            self.booking.HotelName = self.name,
            self.booking.RoomName = strroomname,
            self.Roomif.Address = self.Address,
            self.Roomif.dur = self.duration,
            self.Roomif.arrroom = self.arrroom,
            self.Roomif.roomnumber = self.roomvalue,
            self.Roomif.roomtype = self.comboDetail.mealTypeName,
            self.Roomif.jsonroom = self.jsonroom2.Hotels[0],
            self.Roomif.imgHotel = self.imgHotel;
            self.Roomif.arrrbed = [];
            self.Roomif.imgRoom = self.arrroom[0].Rooms[0].ImagesMaxWidth320;
            self.searchhotel.adult = self.adults;
            self.searchhotel.child = self.child;
            self.searchhotel.roomnumber = self.room;
            self.searchhotel.CheckInDate = self.cin;
            self.searchhotel.CheckOutDate = self.cout;
            self.bookCombo.ComboDetail = combodetail;
            self.bookCombo.arrivalCode = self.comboDetail.arrivalCode;
            self.bookCombo.ComboTitle = self.titlecombo;
            self.bookCombo.MealTypeName = self.comboDetail.mealTypeName;
            self.bookCombo.MealTypeCode = self.comboDetail.mealTypeCode;
            self.bookCombo.FormParam = self.formParam;
            self.bookCombo.arrPassengers=[];
            self.bookCombo.arrlugage=[];
          self.navCtrl.navigateForward('/flightcomboreviews');
  }

  showRoomInfo() {
    this.showroominfo = !this.showroominfo;
  }

  async showDepartureCalendar(combolist) {
    const modal: HTMLIonModalElement =
       await this.modalCtrl.create({
          component: DepartureCalendarPage
    });
    var se = this;
    se.gf.setParams({comboId: this.comboid, fromPlace: combolist.departureCode, comboStartDate: this.comboDetail.startDate, comboEndDate: this.comboDetail.endDate}, 'departure')
    await modal.present();

    modal.onDidDismiss().then((data: OverlayEventDetail) => {
       if (!data.data !== null) {
        se.platform.ready().then(() => {
          se.platform.backButton.subscribe(() => {
            // code that is executed when the user pressed the back button
            se.goback();
          })
        })
        if (!data.data) {
          //se.storage.get('email').then(email => {
            //if (email) {
              se.bookCombo.Address = se.Address;
              se.bookCombo.ComboId = se.comboid;
              se.zone.run(()=>{
                se.cin = se.searchhotel.CheckInDate;
                se.cout = se.searchhotel.CheckOutDate;
                se.cindisplay = moment(this.searchhotel.CheckInDate).format('DD-MM-YYYY');
                se.coutdisplay = moment(this.searchhotel.CheckOutDate).format('DD-MM-YYYY');
              })
              
              let val = 1;
              if (se.fc) {
                se.bookCombo.isFlightCombo = true;
                se.bookCombo.isFlashSale = false;
                se.bookCombo.isNormalCombo = false;
                val = 1;
              }
              if (se.fs) {
                se.bookCombo.isFlashSale = true;
                se.bookCombo.isFlightCombo =false;
                se.bookCombo.isNormalCombo = false;
                se.requestCombo(2);
                val =2;
              }
              if (se.nm) {
                se.bookCombo.isNormalCombo = true;
                se.bookCombo.isFlashSale = false;
                se.bookCombo.isFlightCombo = false;
                se.requestCombo(3);
                val =3;
              }
              se.requestCombo(val);
              // let modal = se.modalCtrl.create('RequestComboPage');
              // modal.present();
              //se.loaddata();
            //}
          //})
        }
       }
       se.gf.googleAnalytion('hoteldetail','showdepaturecalendar',se.nm);
    });
   
}

  async showConfirm() {
    let alert = await this.alertCtrl.create({
      message: "Phiên đăng nhập hết hạn. Nhấn OK để về trang đăng nhập hoặc nhấn Cancel để về màn hình chính.",
      buttons: [{
        text: 'OK',
        role: 'OK',
        handler: () => {
          this.storage.remove('auth_token');
          this.storage.remove('email');
          this.storage.remove('username');
          this.navCtrl.navigateForward('/login');
        }
      },
      {
        text: 'Cancel',
        handler: () => {
          this.storage.remove('auth_token');
          this.storage.remove('email');
          this.storage.remove('username');
          this.navCtrl.navigateForward('/');
        }
      }
      ]
    });
    alert.present();
  }
  async presentLoadingNew() {
    var loader = await this.loadingCtrl.create({
      message: "Đang xử lý...",
      duration:1000
    });
    loader.present();
  }

  async presentLoadingRelated(time) {
    var loader = await this.loadingCtrl.create({
      message: "Đang xử lý...",
      duration: time
    });
    loader.present();
  }

}
