import {Injectable} from '@angular/core';
import {FirebaseAnalytics} from '@ionic-native/firebase-analytics/ngx';
import {Platform, AlertController, ToastController} from '@ionic/angular';
import {C} from '../providers/constants';
import {NetworkProvider} from '../network-provider.service';
import {AppVersion} from '@ionic-native/app-version/ngx';
import * as $ from 'jquery';
import * as request from 'requestretry';

@Injectable({
    providedIn: 'root' // <- ADD THIS
})
export class GlobalFunction {
    private DepartureParams : any;
    private showpickupdatefromdetail = false;
    private HotelRoomDetail : any;
    private exchangeGiftParams : any;
    private mytripBookingDetailParams : any;
    private roomInfoParams : any;
    private hotelNotesParams : any;
    private hotelExpsNotesParams : any;
    private showOccupancyFromRequestcombo : boolean = false;
    private hotelListMoodParams : any;
    private listFlightParams : any;
    private flightComboParams : any;
    private hotellistmoodselectedParams : any;
    private isOnline : any;
    public reLoad = true;
    public reLoaddetail = true;
    public hotelReviewListParams : any;
    public seemoreblogParams : any;
    resetBlogTripsParams : any;
    TripFeedBackParams : any;
    notifiBookingCodeParams : any;
    userAvatarParams : any;
    selectedTab3Params : any;
    notifiSwitchObjParams: any;
    constructor(public platform : Platform, public fba : FirebaseAnalytics, public networkProvider : NetworkProvider, public alertCtrl : AlertController, public appVersion : AppVersion, public toastCtrl : ToastController) {}

    public setReLoadValue(value) {
        this.reLoad = value;
    }
    public setReLoadDetailValue(value) {
        this.reLoaddetail = value;
    }

    public getReLoadValue() {
        return this.reLoad;
    }

    public getAppVersion() {
        this.appVersion.getVersionNumber().then(version => {
            return version.replace(/\./g, '');
        })
    }

    public googleAnalytion(viewName, action, options) {
        if (C.ENV == "prod") {
            this.platform.ready().then(() => {
                this.fba.logEvent(action, {
                    'hitType': 'event',
                    'eventCategory': viewName,
                    'eventLabel': options
                }).then((res : any) => {
                    console.log(res);
                }).catch((error : any) => console.error(error));
            })
        }
    }

    public googleAnalytionCustom(action, params) {
        if (C.ENV == "prod") {
            this.platform.ready().then(() => {
                this.fba.logEvent(action, params).then((res : any) => {
                    console.log(res);
                }).catch((error : any) => console.error(error));
            })
        }
    }

    // //Kiểm tra mạng trước khi loaddata
    // public checkNetworkStatus(): Promise<boolean>{
    // return new Promise((resolve, reject) => {
    //     this.networkProvider.getNetworkStatus().subscribe((connected: boolean) => {
    //       if (connected) {
    //         resolve(true);
    //       }else{
    //         resolve(false);
    //         this.showWarning('Không có kết nối mạng','Vui lòng kết nối mạng để sử dụng các tính năng của ứng dụng','Đóng');
    //       }
    //     });
    // });
    // }

    public async showWarning(header, msg, textButtonOK) { // if(!this.alertCtrl){
        let alert = await this.toastCtrl.create({
            message: msg,
            // header: header,
            duration: 3000,
            position: "top"
        });
        alert.present();
        // }
    }

    public async showToastWarning(msg) {
        let alert = await this.toastCtrl.create(({message: msg, duration: 3000, position: "top"}))
        alert.present();
    }

    public async showConfirmUpdate() {
        let alert = await this.alertCtrl.create({
            message: 'Đã có phiên bản cập nhật mới, cập nhật ngay để sử dụng những tính năng mới nhất',
            buttons: [
                {
                    text: 'Để sau',
                    handler: () => {}
                }, {
                    text: 'Cập nhật',
                    role: 'OK',
                    handler: () => {
                        window.open('https://ivivudownload.page.link/ivivuapp');
                    }
                }
            ]
        });
        alert.present();
    }

    public setParams(params, type) {
        if (type == 'departure') {
            this.DepartureParams = params;
        }
        if (type == 'showpickupdatefromdetail') {
            this.showpickupdatefromdetail = params;
        }
        if (type == 'hotelroomdetail') {
            this.HotelRoomDetail = params;
        }
        if (type == 'exchangegift') {
            this.exchangeGiftParams = params;
        }
        if (type == 'mytripbookingdetail') {
            this.mytripBookingDetailParams = params;
        }
        if (type == 'roomInfo') {
            this.roomInfoParams = params;
        }
        if (type == 'hotelnotes') {
            this.hotelNotesParams = params;
        }
        if (type == 'hotelexpsnotes') {
            this.hotelExpsNotesParams = params;
        }
        if (type == 'requestcombo') {
            this.showOccupancyFromRequestcombo = params;
        }
        if (type == 'hotellistmood') {
            this.hotelListMoodParams = params;
        }
        if (type == 'hotellistmoodselected') {
            this.hotellistmoodselectedParams = params;
        }
        if (type == 'listflight') {
            this.listFlightParams = params;
        }
        if (type == 'flightcombo') {
            this.flightComboParams = params;
        }
        if (type == 'hotelreviewlist') {
            this.hotelReviewListParams = params;
        }
        if (type == 'seemoreblog') {
            this.seemoreblogParams = params;
        }
        if (type == 'resetBlogTrips') {
            this.resetBlogTripsParams = params;
        }
        if (type == 'tripFeedBack') {
            this.TripFeedBackParams = params;
        }
        if (type == 'notifiBookingCode') {
            this.notifiBookingCodeParams = params;
        }
        if (type == 'userAvatar') {
            this.userAvatarParams = params;
        }
        if (type == 'selectedTab3') {
            this.selectedTab3Params = params;
        }
        if(type =='notifiSwitchObj'){
            this.notifiSwitchObjParams = params;
          }
        
    }

    public getParams(type) {
        if (type == 'departure') {
            return this.DepartureParams;
        }
        if (type == 'showpickupdatefromdetail') {
            return this.showpickupdatefromdetail;
        }
        if (type == 'hotelroomdetail') {
            return this.HotelRoomDetail;
        }
        if (type == 'exchangegift') {
            return this.exchangeGiftParams;
        }
        if (type == 'mytripbookingdetail') {
            return this.mytripBookingDetailParams;
        }
        if (type == 'roomInfo') {
            return this.roomInfoParams;
        }
        if (type == 'hotelnotes') {
            return this.hotelNotesParams;
        }
        if (type == 'hotelexpsnotes') {
            return this.hotelExpsNotesParams;
        }
        if (type == 'requestcombo') {
            return this.showOccupancyFromRequestcombo;
        }
        if (type == 'hotellistmood') {
            return this.hotelListMoodParams;
        }
        if (type == 'hotellistmoodselected') {
            return this.hotellistmoodselectedParams;
        }
        if (type == 'listflight') {
            return this.listFlightParams;
        }
        if (type == 'flightcombo') {
            return this.flightComboParams;
        }
        if (type == 'hotelreviewlist') {
            return this.hotelReviewListParams;
        }
        if (type == 'seemoreblog') {
            return this.seemoreblogParams;
        }
        if (type == 'resetBlogTrips') {
            return this.resetBlogTripsParams;
        }
        if (type == 'tripFeedBack') {
            return this.TripFeedBackParams;
        }
        if (type == 'notifiBookingCode') {
            return this.notifiBookingCodeParams;
        }
        if (type == 'userAvatar') {
            return this.userAvatarParams;
        }
        if (type == 'selectedTab3') {
            return this.selectedTab3Params;
        }
        if(type =='notifiSwitchObj'){
            return this.notifiSwitchObjParams;
        }
    }

    public getNetworkStatus() {
        return this.isOnline;
    }
    public setNetworkStatus(value) {
        this.isOnline = value;
    }


    public checkExistsIndex(array, idx) {
        return array.find((item) => {
            return item * 1 == idx * 1;
        })
    }

    /**
     * 
     * @param arrays mảng kiểm tra trùng
     * @param item item kiểm tra
     * @param type loại 1 - topdeal, 2 - region, 3 - mood, 4 - blog
     */
    checkExistsItemInArray(arrays:any,item:any,type:any){
        var res = false;
        if(type=='trip')//hoteldeal || mood
        {
            res = arrays.some(r => r.id == item.id);
        }
        
        return res;
    }

    public removeItem(array, itemcheck) {
        array.filter((item, index) => {
            array.indexOf(item) === index
        });
        array.forEach((item, index) => {
            if (item * 1 == itemcheck * 1) {
                array.splice(index, 1);
            }
        });
    }

    public getServerVersion() {
        return "1.2.6";
    }

    public setActivatedTab(tabIndex) {
        var objTab = document.querySelectorAll('ion-tab-bar');
        if (objTab && objTab.length > 0) {
            var tab = objTab[objTab.length - 1];
            if (tab) {
                //clear current activcetab
                for(let i= 1; i <=5; i++){
                    $(tab.children.item((i - 1) * 2)).attr('aria-selected', 'false');
                }

                setTimeout(() => { // $(tab.children.item( (tabIndex-1)*2 )).addClass('tab-selected');
                    $(tab.children.item((tabIndex - 1) * 2)).attr('aria-selected', 'true');
                }, 500);

            }
        }
    }
    /**
    * Đẩy token + memberid lưu xuống db
    * @param devicetoken key token của device
    * @param authentoken key id member user
    */
    pushTokenAndMemberID(authentoken, devicetoken, appversion) {
        var se = this;
        if (authentoken) {
            var text = "Bearer " + authentoken;
            var options = {
                method: 'POST',
                url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/PushTokenOfUser',
                timeout: 10000,
                maxAttempts: 5,
                retryDelay: 2000,
                headers: {
                    'cache-control': 'no-cache',
                    'content-type': 'application/json-patch+json',
                    authorization: text
                },
                body: {
                    tokenId: devicetoken,
                    appVersion: appversion.replace(/\./g, '')
                },
                json: true
            };
            request(options, function (error, response, body) {
                if (error) {
                    error.page = "login";
                    error.func = "pushTokenAndMemberID";
                    error.param = JSON.stringify(options);
                    C.writeErrorLog(error);
                }
            })
        }
    }

    /**
* Hàm gọi api chung
* @param methodFunc phương thức GET/POST
* @param strUrl Chuỗi api
* @param headerObj object header nếu có
* @param bodyObj object body nếu có
* @param pageName Tên page gọi api
* @param funcName Tên fucntion gọi api
*/
    async RequestApi(methodFunc, strUrl, headerObj, bodyObj, pageName, funcName): Promise<any> {
        return new Promise(
            (resolve, reject) => {
              var options;
              if(headerObj && bodyObj ){
                options = {
                  method: methodFunc,
                  url: strUrl,
                  headers: headerObj,
                  body: bodyObj,
                  json: true,
                  timeout: 180000,
                  maxAttempts: 5,
                  retryDelay: 2000
                }
              }
              
              if(headerObj && !bodyObj){
                options = {
                  method: methodFunc,
                  url: strUrl,
                  timeout: 180000,
                  maxAttempts: 5,
                  retryDelay: 2000,
                  headers: headerObj
                }
              }

                request(options, function (error, response, body) {
                    if (response.statusCode != 200) {
                        var objError = {
                            page: pageName,
                            func: funcName,
                            message: response.statusMessage,
                            content: response.body,
                            type: "warning",
                            param: JSON.stringify(options)
                        };
                        C.writeErrorLog(objError);
                    }
                    if (error) {
                        error.page = pageName;
                        error.func = funcName;
                        error.param = JSON.stringify(options);
                        C.writeErrorLog(objError);
                    }
                    if (response.statusCode == 200) {
                        resolve(JSON.parse(body));
                    }

                })
            }
        )
    }
}
