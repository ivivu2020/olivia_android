import { Component, ViewChildren, QueryList } from '@angular/core';
import { Platform, IonRouterOutlet, ModalController, PopoverController, ActionSheetController, ToastController, NavController, Events } from '@ionic/angular';
import { SplashScreen } from '@ionic-native/splash-screen/ngx';
import { StatusBar } from '@ionic-native/status-bar/ngx';
import { Router } from '@angular/router';
import { SearchHotel,Booking } from'./providers/book-service';
import { GlobalFunction } from'./providers/globalfunction';
import { C } from './providers/constants';
import { Network } from '@ionic-native/network/ngx';
import { FCM } from '@ionic-native/fcm/ngx';

@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html'
})
export class AppComponent {
  // set up hardware back button event.
  lastTimeBackPress = 0;
  timePeriodToExit = 2000;
  disconnectSubscription:any;
  connectSubscription:any;
  @ViewChildren(IonRouterOutlet) routerOutlets: QueryList<IonRouterOutlet>;
  constructor(
    private platform: Platform,
    private splashScreen: SplashScreen,
    private statusBar: StatusBar,
    public modalCtrl: ModalController,
    private popoverCtrl: PopoverController,
    private actionSheetCtrl: ActionSheetController,
    private router: Router,
    private toast: ToastController,
    private navCtrl: NavController,
    public searchhotel: SearchHotel,
    public gf: GlobalFunction,
    public booking: Booking,
    public network: Network,
    public fcm: FCM
  ) {
    this.initializeApp();

    //this.backButtonEvent();
  }

  initializeApp() {
    this.platform.ready().then(() => {
      this.statusBar.styleDefault();
     
      //Start log with UXCam 
      //UXCam.startWithKey(C.UXCam_Key);
      this.disconnectSubscription = this.network.onDisconnect().subscribe(() => {
        //this.presentAlert(); //some alert msg that netwk has gone 
        this.gf.setNetworkStatus(false);
        this.gf.showWarning('Không có kết nối mạng','Vui lòng kết nối mạng để sử dụng các tính năng của ứng dụng','Đóng');
      });
  
      this.connectSubscription = this.network.onConnect().subscribe(() => {
        
        setTimeout(() => {
          if (this.network.type) {
            this.gf.setNetworkStatus(true);
          }
        }, 3000);
      });

      
      this.fcm.onNotification().subscribe(data => {
        window.open(`https://ivivudownload.page.link/ivivuapp`, '_system');
      });
    });
    
  }

}
