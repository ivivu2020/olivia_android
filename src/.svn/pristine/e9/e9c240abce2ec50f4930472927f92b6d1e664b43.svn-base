import { ActivatedRoute, Router } from '@angular/router';
import { AuthService } from '../providers/auth-service';
import { Component, ViewChild, NgZone, OnInit } from '@angular/core';
import {  NavController,Platform } from '@ionic/angular';
import { Booking, RoomInfo, SearchHotel } from '../providers/book-service';
import * as request from 'request';
import { Storage } from '@ionic/storage';
import { C } from '../providers/constants';
import jwt_decode from 'jwt-decode';
import { GlobalFunction } from '../providers/globalfunction';
/**
 * Generated class for the RoompaymentdonePage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */
@Component({
  selector: 'app-roompaymentdone',
  templateUrl: 'roompaymentdone.html',
  styleUrls: ['roompaymentdone.scss'],
})
export class RoompaymentdonePage implements OnInit {
  ischeck: boolean; ishide; code; total; companyname; address; tax; addressorder; timeStamp; jti; cin; cout; priceshow;text;status;ischeckpayment
  constructor(public platform: Platform, public Roomif: RoomInfo, public navCtrl: NavController, public zone: NgZone, 
  public booking: Booking, public authService: AuthService,public activatedRoute: ActivatedRoute,public router: Router,
    public storage: Storage,public gf: GlobalFunction) {
    // this.storage.get('jti').then(jti => {
    //   if (jti) {
    //     this.jti=jti;
    //     this.ishide = true;
    //     this.code = navParams.get('BookingCode');
    //     this.total = booking.cost;
    //     var chuoicin=this.booking.CheckInDate.split('-');
    //     this.cin= chuoicin[2]+"/"+chuoicin[1]+"/"+chuoicin[0];
    //     var chuoicout=this.booking.CheckOutDate.split('-');
    //     this.cout= chuoicout[2]+"/"+chuoicout[1]+"/"+chuoicout[0];
    //   }
    // })
    this.ischeckpayment=Roomif.ischeckpayment;
    this.Roomif.ischeckpoint=false;
    var ti = new Date();
    var ho = ti.getHours();

    if(ho >0 && ho <6){
        this.text = '11 am cùng ngày';
    }
    else if(ho >= 6 && ho < 12){    
      this.text= '17h cùng ngày'
    }
    else if (ho >= 12 && ho < 20){
      this.text= '20h30 cùng ngày'
    }
    else{
      this.text = '11 am hôm sau';
    }
    this.ishide = true;

    // this.total = booking.cost;
    if (Roomif.priceshow) {
      this.priceshow = Roomif.priceshow;
    }
    else {
      this.priceshow = booking.cost;
    }
    Roomif.priceshow="";
    //google analytic
    //gf.googleAnalytion('roompaymentdone','load','');
    this.gf.googleAnalytion('payment','ecommerce_purchase',this.booking.code+'|'+this.booking.CheckInDate+'|'+this.booking.CheckOutDate+'|'+this.booking.Adults+'|'+this.booking.Child+ '|'+this.booking.cost);
    this.refreshToken();

  }
  ngOnInit(){
    this.code = this.activatedRoute.snapshot.paramMap.get('code');
    this.status = this.activatedRoute.snapshot.paramMap.get('stt');
  }
  next() {
    //google analytic
    //this.gf.googleAnalytion('payment','Purchases','hotelid:'+this.booking.code+'|'+this.booking.CheckInDate+'|'+this.booking.CheckOutDate+'/adults:'+this.booking.Adults+'/child:'+this.booking.Child+'/roomnumber:'+ this.booking.roomNb+ '/price:'+this.booking.cost);
    this.navCtrl.navigateBack('/');
    // this.app.getRootNav().getActiveChildNav().select(0);
    // this.timeStamp = new Date();
    // this.timeStamp = moment(this.timeStamp).format('DD/MM/YYYY HH:mm:ss');
    // var se = this;
    // var options = {
    //   method: 'POST',
    //   url: 'http://olivia-api.ivivu.com/api/Transaction',
    //   qs: { k: 'Mobile' },
    //   headers:
    //   {
    //     'content-type': 'application/json'
    //   },
    //   body:
    //   {
    //     ProfileId: se.jti,
    //     HotelId: se.booking.HotelId,
    //     RegionCode: se.authService.regioncode,
    //     RegionId: se.authService.regionid,
    //     HotelName: se.booking.HotelName,
    //     Types: 'purchase',
    //     Price: se.booking.cost.replace(/\./g, ""),
    //     Room: se.booking.RoomName,
    //     TimeStamp: se.timeStamp,
    //     CheckIn: se.cin,
    //     Checkout: se.cout,
    //     Adults: se.booking.Adults,
    //     Child: se.booking.Child
    //   },
    //   json: true
    // };
    // console.log(options);
    // request(options, function (error, response, body) {
    //   if (error) throw new Error(error);
    //   if (body == "Success!") {
    //     se.navCtrl.push('MainPage');
    //   }

    // });

    // this.clearClonePage('page-main');
    // this.navCtrl.push('MainPage');
    // let nav = this.app.getActiveNavs()[0];
    // nav.setRoot('MainPage');
    // nav.popToRoot();
    // this.app.getRootNav().getActiveChildNav().select(0);
   

  }
  refreshToken() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'GET',
          url: C.urls.baseUrl.urlMobile + '/api/Account/reloadTokenClaims',
          headers:
          {
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            authorization: text
          },
        }
        request(options, function (error, response, body) {
          if (response.statusCode != 200) {
            var objError = {
              page: "userprofile",
              func: "refreshToken",
              message: response.statusMessage,
              content: response.body,
              type: "warning",
              param: JSON.stringify(options)
            };
            C.writeErrorLog(objError);
          }
          if (error) {
            error.page = "userprofile";
            error.func = "refreshToken";
            error.param =  JSON.stringify(options);
            C.writeErrorLog(error);
          } else {
            var au = JSON.parse(body);
            se.zone.run(() => {
              se.storage.remove('auth_token');
              se.storage.set('auth_token', au.auth_token);
              var decoded = jwt_decode(au.auth_token);
              se.storage.remove('point');
              se.storage.set('point', decoded.point);
           
            })
          }
        })
      }
    })
  }
  edit(co) {
    if (co == 0) {
      if (this.ischeck) {
        this.ishide = false;
      } else {
        this.ishide = true;
      }
    }
    else {
      this.ishide = false;
      this.ischeck = true;
    }
  }
 
  clearClonePage(pagename) {
    //Xóa clone do push page
    let elements = [];
    elements = Array.from(document.querySelectorAll(pagename));
    if (elements != null && elements.length > 0) {
      elements.forEach(el => {
        if (el != null && el.length > 0) {
          el.remove();
        }
      });
    }
  }
}
