import { Component,NgZone,OnInit } from '@angular/core';
import { Validators, FormBuilder, FormGroup,ReactiveFormsModule  } from '@angular/forms';
import { Platform,NavController, AlertController, ToastController, ActionSheetController } from '@ionic/angular';
import { Storage } from '@ionic/storage';
import * as request from 'requestretry';
import { C } from './../providers/constants';
import { Camera, CameraOptions } from '@ionic-native/camera/ngx';
import { ValueGlobal } from '../providers/book-service';
import { DomSanitizer } from '@angular/platform-browser';
import { GlobalFunction } from './../providers/globalfunction';
import { Crop } from '@ionic-native/crop/ngx';
import { ImagePicker } from '@ionic-native/image-picker/ngx';
import { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer/ngx';
import { File } from '@ionic-native/file/ngx';
import { Http, Headers } from '@angular/http';
import { HttpClientModule } from '@angular/common/http';
import { HTTP } from '@ionic-native/http/ngx';

@Component({
  selector: 'app-userprofile',
  templateUrl: 'userprofile.html',
  styleUrls: ['userprofile.scss'],
  providers: [ImagePicker],
})

export class UserProfilePage implements OnInit{
    userInfoData:any;
    public userProfileData: FormGroup;
    public changepass = false;
    public phone = "";
    public name = "";
    public changephone = false;
    public changename = false;
    public sentOTP = false;
    public haspassword= '';
    public photos:any;
    public strwarning = "";
    public isShowWarning = false;
    public strwarningoldpass = "";
    public intervalID;
    public base64Image:any;
    public htmlImageFromCamera: string;
    respData: any;
    imagePickerOptions = {
        maximumImagesCount: 1,
        quality: 50
      };
    croppedImagepath :any;
    croppedImagefilename: any;
    croppedFile:any;
      
    constructor(public navCtrl: NavController,public toastCtrl: ToastController,
        public zone: NgZone,public storage: Storage,public alertCtrl: AlertController, public formBuilder: FormBuilder,
        public actionsheetCtrl: ActionSheetController, public platform: Platform, public camera: Camera,public valueGlobal: ValueGlobal,
        private DomSanitizer: DomSanitizer,public gf: GlobalFunction,
        private imagePicker: ImagePicker,
        private crop: Crop,
        private transfer: FileTransfer,
        private file: File,
        private http: HTTP){
        let self = this;
        //self.loadUserInfo();
        //self.checkHasPassword();
       
        //google analytic
        gf.googleAnalytion('userprofile','load','');
    }

    ngOnInit(){

    }
    
    
    /**
     * Load thông tin user
     */
    loadUserInfo(){
        var se = this;
        se.storage.get('auth_token').then(auth_token => {
            if (auth_token) {
                var text = "Bearer " + auth_token;
                var options = {
                method: 'GET',
                url: C.urls.baseUrl.urlMobile +'/api/Dashboard/GetUserInfo',
                timeout: 10000, maxAttempts: 5, retryDelay: 2000,
                headers:
                {
                    'cache-control': 'no-cache',
                    'content-type': 'application/json',
                    authorization: text
                }
                };
                request(options, function (error, response, body) {
                if(response.statusCode != 200){
                    var objError ={
                        page: "userprofile",
                        func: "loadUserInfo",
                        message : response.statusMessage,
                        content : response.body,
                        type: "warning",
                        param:  JSON.stringify(options)
                      };
                    C.writeErrorLog(objError);
                }
                if (error) {
                    error.page = "userprofile";
                    error.func = "loadUserInfo";
                    error.param =  JSON.stringify(options);
                    C.writeErrorLog(error);
                }else{
                    if(body){
                        var data = JSON.parse(body);
                        se.zone.run(()=>{
                            se.userInfoData = data;
                            se.bindFormGroup(se.userInfoData);
                        })
                        se.storage.set('userInfoData', data);
                    }
                    else{
                        if(!se.isShowWarning){
                            se.showConfirm();
                            se.isShowWarning = true;
                        }
                    }
                }
                });
            }else{
                se.zone.run(()=>{
                    se.bindFormGroup(null);
                })
            }
        })
    }

    ionViewWillEnter(){
        var se = this;
            setTimeout(()=>{
              se.zone.run(()=>{
                se.storage.get('userInfoData').then((data:any)=>{
                    if(data){
                        se.zone.run(()=>{
                            se.userInfoData = data;
                            se.bindFormGroup(data);
                            
                        })
                    }else{
                        se.loadUserInfo();
                    }
                })
                se.checkHasPassword();
              })
            },100)
            //Set activetab theo form cha
           se.gf.setActivatedTab(5);
        }
    goback(){
        var self = this;
        self.sentOTP = false;
        this.navCtrl.back();
    }
    /**
     * Bind thông tin user + validate
     * @param data thông tin user
     */
    bindFormGroup(data){
        var se = this;
        se.phone = data.phone;
        se.name = data.name;
            se.userProfileData = se.formBuilder.group({
                name: [data.fullname || '',Validators.compose([Validators.required])],
                phone: [data.phone || '',Validators.compose([Validators.required, Validators.pattern("0[9|8|1|7|3|5]([0-9]|\s|-|\.){8,12}")])],
                email: [data.email || '', Validators.compose([Validators.required])],
                oldpassword: ['', Validators.compose([Validators.required, Validators.minLength(6)])],
                newpassword: ['', Validators.compose([Validators.required, Validators.minLength(6)])],
                confirmnewpassword: ['', Validators.compose([Validators.required, Validators.minLength(6)])],
                otp: ['', Validators.compose([Validators.required])],
            });
    }

    changePass(){
        this.zone.run(()=>{
            this.changepass = !this.changepass;
        })
    }

    public async showConfirm(){
        let alert = await this.alertCtrl.create({
          message: "Phiên đăng nhập hết hạn. Xin vui lòng đăng nhập lại để sử dụng chức năng này.",
          buttons: [
          {
            text: 'Để sau',
            handler: () => {
              this.storage.remove('auth_token');
              this.storage.remove('email');
              this.storage.remove('username');
              this.storage.remove('jti');
              this.storage.remove('userInfoData');
              this.storage.remove('userRewardData');
              this.storage.remove('point');
              this.navCtrl.navigateRoot('/tab5');
            }
          },
          {
            text: 'Đăng nhập',
            role: 'OK',
            handler: () => {
              this.storage.remove('auth_token');
              this.storage.remove('email');
              this.storage.remove('username');
              this.storage.remove('jti');
              this.storage.remove('userInfoData');
              this.storage.remove('userRewardData');
              this.storage.remove('point');
              this.valueGlobal.logingoback = "MainPage";
              this.navCtrl.navigateForward('/login');
            }
          }
        ]
      });
      alert.present();

    //   alert.onDidDismiss().then((data)=>{
    //     this.storage.remove('auth_token');
    //     this.storage.remove('email');
    //     this.storage.remove('username');
    //     this.storage.remove('jti');
    //     this.storage.remove('userInfoData');
    //     this.storage.remove('userRewardData');
    //     this.storage.remove('point');
    //     this.navCtrl.navigateBack('/');
    //   })
    }

    public phoneChange(val){
        var se = this;
        //user có số phone thì check thay đổi mới show
        se.zone.run(()=>{
            if(se.phone){
                se.changephone = se.phone != val.detail.value;
            }else{
                se.changephone =true;
                se.phone = val.detail.value;
            }
        })
        
    }

    cancel(){
        var self = this;
        self.sentOTP = false;
        self.navCtrl.back();
    }

    saveChange(val){
        var se = this;
        var obj = {};
        //validate
        if(!se.userProfileData.value.name){
            se.presentToast('Họ tên không được để trống');
            return;
        }
        if(!se.userProfileData.value.email){
            se.presentToast('Email không được để trống');
            return;
        }
        if(se.changepass && !se.userProfileData.value.oldpassword){
            se.presentToast('Mật khẩu cũ không được để trống');
            return;
        }
        if(se.changepass && !se.userProfileData.value.newpassword){
            se.presentToast('Mật khẩu mới không được để trống');
            return;
        }
        if(se.changepass && !se.userProfileData.value.confirmnewpassword){
            se.presentToast('Xác nhận mật khẩu mới không được để trống');
            return;
        }
        if( (se.changepass && se.userProfileData.value.oldpassword && se.userProfileData.value.oldpassword.length <6)
        ||(se.userProfileData.value.newpassword && se.userProfileData.value.newpassword.length <6)
        ||(se.userProfileData.value.confirmnewpassword && se.userProfileData.value.confirmnewpassword.length <6) ) {
            se.presentToast('Mật khẩu phải lớn hơn 6 ký tự');
            return;
        }
        if(se.changepass && se.userProfileData.value.newpassword != se.userProfileData.value.confirmnewpassword ){
            se.presentToast('Mật khẩu mới không trùng khớp');
            return;
        }
        if(!se.changepass){
            obj ={"userInfo": {
                "email": se.userProfileData.value.email,
                "fullname": se.userProfileData.value.name,
                //"avatar": "string",
                "phone": se.userProfileData.value.phone,
                "otpPhone": se.userProfileData.value.otp,
                "passCheckbox": se.changepass,
                }
            }
        }
        else{
            obj ={"userInfo": {
            "email": se.userProfileData.value.email,
            "fullname": se.userProfileData.value.name,
            //"avatar": "string",
            "phone": se.userProfileData.value.phone,
            "otpPhone": se.userProfileData.value.otp,
            "passCheckbox": true,
            "oldPassword": se.haspassword ? se.userProfileData.value.oldpassword : "",
            "newPassword1": se.userProfileData.value.newpassword,
            "newPassword2": se.userProfileData.value.confirmnewpassword
                }
            }
        }
        se.storage.get('auth_token').then(auth_token => {
            if (auth_token) {
                var text = "Bearer " + auth_token;
                var options = {
                method: 'POST',
                url: C.urls.baseUrl.urlMobile +'/api/Dashboard/ChangeUserInfo',
                timeout: 10000, maxAttempts: 5, retryDelay: 2000,
                headers:
                {
                    'cache-control': 'no-cache',
                    'content-type': 'application/json-patch+json',
                    authorization: text
                },
                body: JSON.stringify(obj)
                };
                request.timeout = 60000;
                request(options, function (error, response, body) {
                if(response.statusCode == 400){
                    var rs = JSON.parse(body);
                    if(se.changepass){
                        se.strwarningoldpass = rs.msg;
                    }else{
                        se.strwarning = rs.msg;
                    }
                }
                if(response.statusCode != 200){
                    var objError ={
                        page: "userprofile",
                        func: "saveChange",
                        message : response.statusMessage,
                        content : response.body,
                        type: "warning",
                        param:  JSON.stringify(options)
                      };
                    C.writeErrorLog(objError);
                }
                if (error) {
                    error.page = "userprofile";
                    error.func = "saveChange";
                    error.param =  JSON.stringify(options);
                    C.writeErrorLog(error);
                }else{
                    var rs = JSON.parse(body);
                    if(rs.result){
                        var info;
                        var textfullname = se.userProfileData.value.name.split(' ')
                        if (textfullname.length > 2) {
                            let name = '';
                            for (let i = 1; i < textfullname.length; i++) {
                                if (i == 1) {
                                    name += textfullname[i];
                                } else {
                                    name += ' ' + textfullname[i];
                                }
                            }
                            info = { ho: textfullname[0], ten: name, phone: se.userProfileData.value.phone }
                        } else if (textfullname.length > 1) {
                            info = { ho: textfullname[0], ten: textfullname[1], phone: se.userProfileData.value.phone }
                        }
                        else if (textfullname.length == 1) {
                            info = { ho: textfullname[0], ten: "", phone: se.userProfileData.value.phone }
                        }
                        se.storage.remove('infocus');
                        se.storage.set("infocus", info);
                        se.presentToast("Cập nhật hồ sơ thành công.");
                        se.refreshToken();
                        se.clearSessionOTP();
                        se.loadUserInfo();
                    }
                }
                })
            }
        })
    }

    async presentToast(msg) {
        const toast = await this.toastCtrl.create({
          message: msg,
          duration: 2000,
          position: 'top',
        });
        toast.present();
      }

    sendOTP(){
        var se = this;
        se.sentOTP = true;
        var elphone = document.getElementById('ipOTP');
        var textphone = se.userProfileData.value.phone || "";
       
        se.storage.get('auth_token').then(auth_token => {
            if (auth_token) {
                var text = "Bearer " + auth_token;
                var options = {
                method: 'POST',
                url: C.urls.baseUrl.urlMobile +'/api/Dashboard/OTPChangePhoneNumber',
                headers:
                {
                    'cache-control': 'no-cache',
                    'content-type': 'application/json-patch+json',
                    authorization: text
                },
                body: JSON.stringify({ "phoneNumber": textphone})
                };
                request(options, function (error, response, body) {
                if(response.statusCode != 200){
                    var objError ={
                        page: "userprofile",
                        func: "sentOTP",
                        message : response.statusMessage,
                        content : response.body,
                        type: "warning",
                        param:  JSON.stringify(options)
                      };
                    C.writeErrorLog(objError);
                }
                if (error) {
                    error.page = "userprofile";
                    error.func = "sentOTP";
                    error.param =  JSON.stringify(options);
                    C.writeErrorLog(error);
                }else{
                    var rs = JSON.parse(body);

                    setTimeout(()=>{
                        se.clearSessionOTP();
                    },180000);
                }
                })
        }
    })

    }

    clearSessionOTP(){
        var se = this;
        se.zone.run(()=>{
            se.sentOTP = false;
            se.changephone = false;
            se.changename = false;
            se.changepass = false;
            se.strwarning = "";
            se.strwarningoldpass = "";
        })
    }

    refreshToken(){
        var se = this;
        se.storage.get('auth_token').then(auth_token => {
            if (auth_token) {
            var text = "Bearer " + auth_token;
                    var options = {
                    method: 'GET',
                    url: C.urls.baseUrl.urlMobile +'/api/Account/reloadTokenClaims',
                    headers:
                    {
                        'cache-control': 'no-cache',
                        'content-type': 'application/json',
                        authorization: text
                    },
                }
                request(options, function (error, response, body) {
                    if(response.statusCode != 200){
                        var objError ={
                            page: "userprofile",
                            func: "refreshToken",
                            message : response.statusMessage,
                            content : response.body,
                            type: "warning",
                            param:  JSON.stringify(options)
                        };
                        C.writeErrorLog(objError);
                    }
                    if (error) {
                        error.page = "userprofile";
                        error.func = "refreshToken";
                        error.param =  JSON.stringify(options);
                        C.writeErrorLog(error);
                    }else{
                        var au = JSON.parse(body);
                        se.zone.run(()=>{
                            se.storage.remove('auth_token');
                            se.storage.set('auth_token', au.auth_token);
                            if(se.nameChange){
                                se.storage.remove('username');
                                se.storage.set('username', se.userProfileData.value.name);
                            }
                        })
                    }
                    })
            }
        })
    }

    checkHasPassword(){
        var se = this;
        se.storage.get('auth_token').then(auth_token => {
            if (auth_token) {
                var text = "Bearer " + auth_token;
                var options = {
                method: 'GET',
                url: C.urls.baseUrl.urlMobile +'/api/Dashboard/CheckHasPassword',
                headers:
                {
                    'cache-control': 'no-cache',
                    'content-type': 'application/json-patch+json',
                    authorization: text
                }
                };
                request.timeout = 60000;
                request(options, function (error, response, body) {
                    if(response.statusCode != 200){
                        var objError ={
                            page: "userprofile",
                            func: "checkHasPassword",
                            message : response.statusMessage,
                            content : response.body,
                            type: "warning",
                            param: JSON.stringify(options),
                          };
                        C.writeErrorLog(objError);
                    }
                    if (error) {
                        error.page = "userprofile";
                        error.func = "checkHasPassword";
                        error.param = JSON.stringify(options);
                        C.writeErrorLog(error);
                    }else if(body){
                        var obj = JSON.parse(body);
                        se.zone.run(()=>{
                            se.haspassword = obj.hasPassword;
                        })
                    }
                })
            }
        }) 
    }

   async changeAvatar(){
        let actionSheet = await this.actionsheetCtrl.create({
          cssClass: 'action-sheets-basic-page',
          buttons: [
            {
              text: 'Take photo',
              role: 'destructive',
              icon: !this.platform.is('ios') ? 'ios-camera-outline' : null,
              handler: () => {
                
                this.captureImage(false);
              }
            },
            {
              text: 'Choose photo from Gallery',
              icon: !this.platform.is('ios') ? 'ios-images-outline' : null,
              handler: () => {
                this.captureImageGallery();
              }
            },
          ]
        });
        actionSheet.present();
        }

        async captureImageGallery() {
            var se = this;
            // const options: CameraOptions = {
            //     quality: 50,
            //     destinationType: this.camera.DestinationType.DATA_URL,
            //     encodingType: this.camera.EncodingType.JPEG,
            //     mediaType: this.camera.MediaType.PICTURE,
            //     sourceType: this.camera.PictureSourceType.SAVEDPHOTOALBUM
            //   }

            // var se = this;
            // se.zone.run(()=>{
            //     se.camera.getPicture(options).then((imageData) => {
            //         se.base64Image = 'data:image/jpeg;base64,'+imageData;
            //         se.photos.unshift(se.base64Image);

            //         if(se.photos){
            //             //se.uploadAvatar(buf);
            //             se.cropUpload(se.photos);
            //         }
            //     }, (err) => {
            //         se.presentToast(err);
            //     });
                
            // })

            const options: CameraOptions = {
                quality: 76,
                sourceType: se.camera.PictureSourceType.SAVEDPHOTOALBUM,
                destinationType: se.camera.DestinationType.FILE_URI,
                encodingType: se.camera.EncodingType.JPEG,
                mediaType: se.camera.MediaType.PICTURE,
                saveToPhotoAlbum: true,
                correctOrientation: true,
              }

              se.camera.getPicture(options).then((imageData) => {    
                let filename,path;
                se.base64Image = imageData;
                    path = imageData.substring(0, imageData.lastIndexOf('/') + 1);
                    filename = imageData.substring(imageData.lastIndexOf('/') + 1);
                    let index = filename.indexOf('?');     
                    if (index > -1) {
                      filename = filename.substring(0,index);
                    }      
                //   }
                //   if (sourceType === this.camera.PictureSourceType.CAMERA) {
                //        filename = imageData.substring(imageData.lastIndexOf('/') + 1);
                //        path = imageData.substring(0, imageData.lastIndexOf('/') + 1);
                //       console.log(path,'FileName::', filename);            
                //   }
                    //se.photos=filename;
                    se.croppedImagefilename = filename;
                    se.cropImage(imageData);
                })
        }

        uploadAvatar(image: any){
            var se = this;
            var formData: FormData = new FormData(document.forms[0]);
            formData.append("file[]", image, se.croppedImagefilename);
            se.storage.get('auth_token').then(auth_token => {
                if (auth_token) {
                    var text = "Bearer " + auth_token;
                    var headers = new Headers();
                    headers.append("Authorization", "Bearer " + auth_token);
                    // var options = {
                    // method: 'POST',
                    // //url: C.urls.baseUrl.urlMobile +'/api/Dashboard/UploadAvatar',
                    // url: 'https://beta-olivia.ivivu.com/api/dashboard/uploadAvatar',
                    // headers:
                    // {
                    //     'Accept': 'application/json, text/plain',
                    //     'Accept-Encoding': 'gzip, deflate, br',
                    //     'Content-type': 'multipart/form-data; boundary=----WebKitFormBoundaryTbBW188DRAsCaoVU',
                    //     Authorization: text
                    // },
                    // body: {name: "file[]", value: image},
                    //json: true
                    //};
                    se.http.post(C.urls.baseUrl.urlMobile + '/dashboard/uploadAvatar', formData, { headers }).then((res)=>{
                        if (!res.error) {
                            se.refreshToken();
                            se.loadUserInfo();
                        }
                    })
                    // request(options, function (error, response, body) {
                    //     if(response.statusCode != 200){
                    //         var objError ={
                    //             page: "userprofile",
                    //             func: "captureImage",
                    //             message : response.statusMessage,
                    //             content : response.body,
                    //             type: "warning",
                    //             param: JSON.stringify(options)
                    //           };
                    //         C.writeErrorLog(objError);
                    //     }
                    //     if (error) {
                    //         error.page = "userprofile";
                    //         error.func = "captureImage";
                    //         error.param = JSON.stringify(options);
                    //         C.writeErrorLog(error);
                    //     }else{
                    //         se.refreshToken();
                    //         se.loadUserInfo();
                    //     }
                    // })
                }
            }) 
        }

        async captureImage(useAlbum: boolean) {
            const options: CameraOptions = {
              quality: 50,
              destinationType: this.camera.DestinationType.DATA_URL,
              encodingType: this.camera.EncodingType.JPEG,
              mediaType: this.camera.MediaType.PICTURE,
              sourceType: this.camera.PictureSourceType.CAMERA
              //...useAlbum ? {sourceType: this.camera.PictureSourceType.SAVEDPHOTOALBUM} : {sourceType: this.camera.PictureSourceType.CAMERA}
            
            }
        
            this.zone.run(()=>{
                this.camera.getPicture(options).then((imageData) => {
                    // imageData is either a base64 encoded string or a file URI
                    // If it's base64 (DATA_URL):
                    let base64Image = imageData;
                    this.photos.push('data:image/jpeg;base64,' + base64Image);
                    this.photos.reverse();
                    let buf = new Buffer(base64Image,'base64');
                    if(this.photos){
                        //this.uploadAvatar(buf);
                    }
                   }, (err) => {
                    // Handle error
                    this.presentToast(err);
                   });
            })
        }

        nameChange(val){
            var se = this;
            //user có số phone thì check thay đổi mới show
            se.zone.run(()=>{
                if(se.userProfileData.value.name){
                    se.changename = se.name != val.detail.value;
                }
            })
        }

        changepassword(){
            this.navCtrl.navigateForward(['app/tabs/userchangepassword']);
        }

        cropUpload(imageData: any) {
            //this.imagePicker.getPictures({ maximumImagesCount: 1, outputType: 0 }).then((results) => {
              //for (let i = 0; i < results.length; i++) {
                  console.log('Image URI: ' + imageData);
                  this.crop.crop(imageData, { quality: 100 })
                    .then(
                      newImage => {
                        console.log('new image path is: ' + newImage);
                        const fileTransfer: FileTransferObject = this.transfer.create();
                        const uploadOpts: FileUploadOptions = {
                           fileKey: 'file',
                           fileName: newImage.substr(newImage.lastIndexOf('/') + 1)
                        };
          
                        fileTransfer.upload(newImage, C.urls.baseUrl.urlMobile +'/api/Dashboard/UploadAvatar', uploadOpts)
                         .then((data) => {
                           console.log(data);
                           this.respData = JSON.parse(data.response);
                           console.log(this.respData);
                           //this.fileUrl = this.respData.fileUrl;
                         }, (err) => {
                           console.log(err);
                         });
                      },
                      error => console.error('Error cropping image', error)
                    );
              //}
            //}, (err) => { console.log(err); });
          }

        pickImage() {
            this.imagePicker.getPictures(this.imagePickerOptions).then((results) => {
              for (var i = 0; i < results.length; i++) {
                this.cropImage(results[i]);
              }
            }, (err) => {
              alert(err);
            });
          }
        
          cropImage(imgPath) {
            this.crop.crop(imgPath, { quality: 100 })
              .then(
                newPath => {
                  this.showCroppedImage(newPath.split('?')[0]);
                  this.croppedFile = this.readFile(newPath);
                },
                error => {
                  alert('Error cropping image' + error);
                }
                
              );
          }
        
          showCroppedImage(ImagePath){
            //this.isLoading = true;
            var copyPath = ImagePath;
            var splitPath = copyPath.split('/');
            var imageName = splitPath[splitPath.length-1];
            var filePath = ImagePath.split(imageName)[0];
            var splitType = imageName.split('.');
            var imageType = splitType[splitType.length -1];
            var se = this;
            se.file.readAsDataURL(filePath,imageName).then(base64=>{
                se.zone.run(()=>{
                    se.croppedImagepath = base64;
                })
                
                //const contentType = 'image/jpg';
                const contentType ='image/'+imageType;
                let b64:any = base64.split(',')[1];
                const blob = se.b64toBlob(b64, contentType);
                //const byteCharacters = atob(b64);
                //const buf = se.base64ToArrayBuffer(b64);
                se.uploadAvatar(blob);
                //this.uploadAvatar(base64);
            })
            // this.file.readAsDataURL(filePath,imageName).then(base64=>{
            //     this.croppedImagepath = base64;
            //     //Upload 
            //     const fileTransfer: FileTransferObject = this.transfer.create();
            //     const uploadOpts: FileUploadOptions = {
            //        fileKey: 'file',
            //        fileName: base64.substr(base64.lastIndexOf('/') + 1)
            //     };
  
            //     fileTransfer.upload(base64, C.urls.baseUrl.urlMobile +'/api/Dashboard/UploadAvatar', uploadOpts)
            //      .then((data) => {
            //        console.log(data);
            //        this.respData = JSON.parse(data.response);
            //        console.log(this.respData);
            //        //this.fileUrl = this.respData.fileUrl;
            //      }, (err) => {
            //        console.log(err);
            //      });
            // },error=>{
            //   alert('Error in showing image' + error);
            //   //this.isLoading = false;
            // });
          }

          b64toBlob(b64Data, contentType, sliceSize=512){
            const byteCharacters = atob(b64Data);
            const byteArrays = [];
          
            for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
              const slice = byteCharacters.slice(offset, offset + sliceSize);
          
              const byteNumbers = new Array(slice.length);
              for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
              }
          
              const byteArray = new Uint8Array(byteNumbers);
              byteArrays.push(byteArray);
            }
          
            const blob = new Blob(byteArrays, {type: contentType});
            return blob;
          }
          
          base64ToArrayBuffer(base64) {
            var binary_string =  window.atob(base64);
            var len = binary_string.length;
            var bytes = new Uint8Array( len );
            for (var i = 0; i < len; i++)        {
                bytes[i] = binary_string.charCodeAt(i);
            }
            return bytes.buffer;
        }

        public readFile(file: any) {
            const reader = new FileReader();
            reader.onloadend = () => {
              const formData = new FormData();
              const imgBlob = new Blob([reader.result], {type: file.type});
              formData.append('file[]', imgBlob, file.name);
            };
            reader.readAsArrayBuffer(file);
            return reader;
          }
}