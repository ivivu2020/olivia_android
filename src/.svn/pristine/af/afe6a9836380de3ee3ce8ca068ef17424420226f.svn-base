import {Injectable} from '@angular/core';
import {FirebaseAnalytics} from '@ionic-native/firebase-analytics/ngx';
import {Platform, AlertController, ToastController, NavController} from '@ionic/angular';
import {C} from '../providers/constants';
import {NetworkProvider} from '../network-provider.service';
import {AppVersion} from '@ionic-native/app-version/ngx';
import * as $ from 'jquery';
import * as request from 'requestretry';
import { ValueGlobal } from './book-service';
import { Storage } from '@ionic/storage';

@Injectable({
    providedIn: 'root' // <- ADD THIS
})
export class GlobalFunction {
  
    private DepartureParams : any;
    private showpickupdatefromdetail = false;
    private HotelRoomDetail : any;
    private exchangeGiftParams : any;
    private mytripBookingDetailParams : any;
    private roomInfoParams : any;
    private hotelNotesParams : any;
    private hotelExpsNotesParams : any;
    private showOccupancyFromRequestcombo : boolean = false;
    private hotelListMoodParams : any;
    private listFlightParams : any;
    private listCarParams : any;
    private listObjcars : any;
    private flightComboParams : any;
    private hotellistmoodselectedParams : any;
    private isOnline : any;
    public reLoad = true;
    public reLoaddetail = true;
    public hotelReviewListParams : any;
    public seemoreblogParams : any;
    resetBlogTripsParams : any;
    TripFeedBackParams : any;
    notifiBookingCodeParams : any;
    userAvatarParams : any;
    selectedTab3Params : any;
    notifiSwitchObjParams: any;
    experiencesearchParams: any;
    experienceItemParams: any;
    experienceFilter_regionIdParams: any;
    experiencesearchTagsIdParams: any;
    listDistanceNearByParams: any;
    listSearch_ExperienceDetailParams: any;
    listsearchblogParams: any;
    blogidParams: any;
    itemslugParams: any;
    searchblogtextParams: any;
    experienceFilter_regionCodeParams: any;
    experienceLocationParams: any;
    insurrenceDetailParams: any;
    constructor(public platform : Platform, 
        public fba : FirebaseAnalytics, 
        public networkProvider : NetworkProvider, 
        public alertCtrl : AlertController, 
        public appVersion : AppVersion, 
        public toastCtrl : ToastController,
        public storage: Storage,
        public valueGlobal: ValueGlobal,
        public navCtrl: NavController) {}

    public setReLoadValue(value) {
        this.reLoad = value;
    }
    public setReLoadDetailValue(value) {
        this.reLoaddetail = value;
    }

    public getReLoadValue() {
        return this.reLoad;
    }

    public getAppVersion() {
        this.appVersion.getVersionNumber().then(version => {
            return version.replace(/\./g, '');
        })
    }

    public googleAnalytion(viewName, action, options) {
        if (C.ENV == "prod") {
            this.platform.ready().then(() => {
                if(action != "screen_view"){
                    this.fba.logEvent(action, {
                        'hitType': 'event',
                        'eventCategory': viewName,
                        'eventLabel': options
                    }).then((res : any) => {
                        console.log(res);
                    }).catch((error : any) => console.error(error));
                }else{
                    this.fba.setCurrentScreen(viewName);
                }
                
            })
        }
    }

    public googleAnalytionCustom(action, params) {
        if (C.ENV == "prod") {
            this.platform.ready().then(() => {
                this.fba.logEvent(action, params).then((res : any) => {
                    console.log(res);
                }).catch((error : any) => console.error(error));
            })
        }
    }

    // //Kiểm tra mạng trước khi loaddata
    // public checkNetworkStatus(): Promise<boolean>{
    // return new Promise((resolve, reject) => {
    //     this.networkProvider.getNetworkStatus().subscribe((connected: boolean) => {
    //       if (connected) {
    //         resolve(true);
    //       }else{
    //         resolve(false);
    //         this.showWarning('Không có kết nối mạng','Vui lòng kết nối mạng để sử dụng các tính năng của ứng dụng','Đóng');
    //       }
    //     });
    // });
    // }

    public async showWarning(header, msg, textButtonOK) { // if(!this.alertCtrl){
        let alert = await this.toastCtrl.create({
            message: msg,
            // header: header,
            duration: 3000,
            position: "top"
        });
        alert.present();
        // }
    }

    public async showToastWarning(msg) {
        let alert = await this.toastCtrl.create(({message: msg, duration: 3000, position: "top"}))
        alert.present();
    }

    public async showConfirmUpdate() {
        let alert = await this.alertCtrl.create({
            message: 'Đã có phiên bản cập nhật mới, cập nhật ngay để sử dụng những tính năng mới nhất',
            buttons: [
                {
                    text: 'Để sau',
                    handler: () => {}
                }, {
                    text: 'Cập nhật',
                    role: 'OK',
                    handler: () => {
                        window.open('https://ivivudownload.page.link/ivivuapp');
                    }
                }
            ]
        });
        alert.present();
    }

    public setParams(params, type) {
        if (type == 'departure') {
            this.DepartureParams = params;
        }
        if (type == 'showpickupdatefromdetail') {
            this.showpickupdatefromdetail = params;
        }
        if (type == 'hotelroomdetail') {
            this.HotelRoomDetail = params;
        }
        if (type == 'exchangegift') {
            this.exchangeGiftParams = params;
        }
        if (type == 'mytripbookingdetail') {
            this.mytripBookingDetailParams = params;
        }
        if (type == 'roomInfo') {
            this.roomInfoParams = params;
        }
        if (type == 'hotelnotes') {
            this.hotelNotesParams = params;
        }
        if (type == 'hotelexpsnotes') {
            this.hotelExpsNotesParams = params;
        }
        if (type == 'requestcombo') {
            this.showOccupancyFromRequestcombo = params;
        }
        if (type == 'hotellistmood') {
            this.hotelListMoodParams = params;
        }
        if (type == 'hotellistmoodselected') {
            this.hotellistmoodselectedParams = params;
        }
        if (type == 'listflight') {
            this.listFlightParams = params;
        }
        if (type == 'flightcombo') {
            this.flightComboParams = params;
        }
        if (type == 'hotelreviewlist') {
            this.hotelReviewListParams = params;
        }
        if (type == 'seemoreblog') {
            this.seemoreblogParams = params;
        }
        if (type == 'resetBlogTrips') {
            this.resetBlogTripsParams = params;
        }
        if (type == 'tripFeedBack') {
            this.TripFeedBackParams = params;
        }
        if (type == 'notifiBookingCode') {
            this.notifiBookingCodeParams = params;
        }
        if (type == 'userAvatar') {
            this.userAvatarParams = params;
        }
        if (type == 'selectedTab3') {
            this.selectedTab3Params = params;
        }
        if(type =='notifiSwitchObj'){
            this.notifiSwitchObjParams = params;
          }
        if(type=='experiencesearch'){
            this.experiencesearchParams = params;
        }
        if(type=='experienceItem'){
            this.experienceItemParams = params;
        }
        if(type=='experienceFilter_regionId'){
            this.experienceFilter_regionIdParams = params;
        }
        if(type=='experienceFilter_regionCode'){
            this.experienceFilter_regionCodeParams = params;
        }
        if(type=='experiencesearchTagsId'){
            this.experiencesearchTagsIdParams = params;
        }
        if(type=='listDistanceNearBy'){
            this.listDistanceNearByParams = params;
        }
        if(type=='listSearch_ExperienceDetail'){
            this.listSearch_ExperienceDetailParams = params;
        }
        if (type == 'listcar') {
            this.listCarParams = params;
        }
        if (type == 'carscombo') {
            this.listObjcars = params;
        }
        if(type=='listDistanceNearBy'){
            this.listDistanceNearByParams = params;
        }
        if(type=='listSearch_ExperienceDetail'){
            this.listSearch_ExperienceDetailParams = params;
        }
        if(type=='listsearchblog'){
          this.listsearchblogParams = params;
        }
        if(type=='blogid'){
          this.blogidParams = params;
        }
        if(type=='itemslug'){
          this.itemslugParams = params;
        }
        if(type=='searchblogtext'){
          this.searchblogtextParams = params;
        }
        if(type=='searchblogmodaltext'){
            this.searchblogtextParams = params;
          }
        if(type=='experienceLocation'){
            this.experienceLocationParams = params;
        }
        if(type=='insurrenceDetail'){
            this.insurrenceDetailParams = params;
        }
      
    }

    public getParams(type) {
        if (type == 'departure') {
            return this.DepartureParams;
        }
        if (type == 'showpickupdatefromdetail') {
            return this.showpickupdatefromdetail;
        }
        if (type == 'hotelroomdetail') {
            return this.HotelRoomDetail;
        }
        if (type == 'exchangegift') {
            return this.exchangeGiftParams;
        }
        if (type == 'mytripbookingdetail') {
            return this.mytripBookingDetailParams;
        }
        if (type == 'roomInfo') {
            return this.roomInfoParams;
        }
        if (type == 'hotelnotes') {
            return this.hotelNotesParams;
        }
        if (type == 'hotelexpsnotes') {
            return this.hotelExpsNotesParams;
        }
        if (type == 'requestcombo') {
            return this.showOccupancyFromRequestcombo;
        }
        if (type == 'hotellistmood') {
            return this.hotelListMoodParams;
        }
        if (type == 'hotellistmoodselected') {
            return this.hotellistmoodselectedParams;
        }
        if (type == 'listflight') {
            return this.listFlightParams;
        }
        if (type == 'flightcombo') {
            return this.flightComboParams;
        }
        if (type == 'hotelreviewlist') {
            return this.hotelReviewListParams;
        }
        if (type == 'seemoreblog') {
            return this.seemoreblogParams;
        }
        if (type == 'resetBlogTrips') {
            return this.resetBlogTripsParams;
        }
        if (type == 'tripFeedBack') {
            return this.TripFeedBackParams;
        }
        if (type == 'notifiBookingCode') {
            return this.notifiBookingCodeParams;
        }
        if (type == 'userAvatar') {
            return this.userAvatarParams;
        }
        if (type == 'selectedTab3') {
            return this.selectedTab3Params;
        }
        if(type =='notifiSwitchObj'){
            return this.notifiSwitchObjParams;
        }
        if(type=='experiencesearch'){
            return this.experiencesearchParams;
        }
        if(type=='experienceItem'){
            return this.experienceItemParams;
        }
        if(type=='experienceFilter_regionId'){
            return this.experienceFilter_regionIdParams;
        }
        if(type=='experienceFilter_regionCode'){
            return this.experienceFilter_regionCodeParams;
        }
        if(type=='experiencesearchTagsId'){
            return this.experiencesearchTagsIdParams;
        }
        if(type=='listDistanceNearBy'){
            return this.listDistanceNearByParams;
        }
        if(type=='listSearch_ExperienceDetail'){
            return this.listSearch_ExperienceDetailParams;
        }
        if (type == 'listcar') {
            return this.listCarParams;
        }
        if (type == 'carscombo') {
            return this.listObjcars;
        }
        if(type=='listsearchblog'){
            return this.listsearchblogParams;
          }
          if(type=='blogid'){
            return this.blogidParams;
          }
          if(type=='itemslug'){
            return this.itemslugParams;
          }
          if(type=='searchblogtext'){
            return this.searchblogtextParams;
          }
          if(type=='searchblogmodaltext'){
            return this.searchblogtextParams;
          }
          if(type=='experienceLocation'){
              return this.experienceLocationParams;
          }
          if(type=='insurrenceDetail'){
            return this.insurrenceDetailParams;
        }
     
    }

    public getNetworkStatus() {
        return this.isOnline;
    }
    public setNetworkStatus(value) {
        this.isOnline = value;
    }


    public checkExistsIndex(array, idx) {
        return array.find((item) => {
            return item * 1 == idx * 1;
        })
    }

    /**
     * 
     * @param arrays mảng kiểm tra trùng
     * @param item item kiểm tra
     * @param type loại 1 - topdeal, 2 - region, 3 - mood, 4 - blog
     */
    checkExistsItemInArray(arrays:any,item:any,type:any){
        var res = false;``
        if(type=='trip' || type == 'experiencesearch' || 'blogsearch')//hoteldeal || mood
        {
            res = arrays.some(r => r.id == item.id);
        }
        if(type=='blog')//blog
        {
            res = arrays.some(r => r.Id == item.Id);
        }
        if(type == 'filtername'){
            res = arrays.some(r => r == item);
        }
        
        return res;
    }

    public removeItem(array, itemcheck) {
        array.filter((item, index) => {
            array.indexOf(item) === index
        });
        array.forEach((item, index) => {
            if (item * 1 == itemcheck * 1) {
                array.splice(index, 1);
            }
        });
    }
    public removeItemInArray(array,item){
        array.forEach( (arrayItem, index) => {
          if(arrayItem.id == item.id) array.splice(index,1);
        });
    }

    public getServerVersion() {
        return "1.2.6";
    }

    public setActivatedTab(tabIndex) {
        var objTab = document.querySelectorAll('ion-tab-bar');
        if (objTab && objTab.length > 0) {
            var tab = objTab[objTab.length - 1];
            if (tab) {
                //clear current activcetab
                for(let i= 1; i <=5; i++){
                    $(tab.children.item((i - 1) * 2)).attr('aria-selected', 'false');
                }

                setTimeout(() => { // $(tab.children.item( (tabIndex-1)*2 )).addClass('tab-selected');
                    $(tab.children.item((tabIndex - 1) * 2)).attr('aria-selected', 'true');
                }, 500);

            }
        }
    }
    public clearActivatedTab() {
        var objTab = document.querySelectorAll('ion-tab-bar');
        if (objTab && objTab.length > 0) {
            objTab.forEach(element => {
                if (element) {
                    //clear current activcetab
                    for(let i= 1; i <=5; i++){
                        $(element.children.item((i - 1) * 2)).attr('aria-selected', 'false');
                    }
                }
            });
        }
    }
    /**
    * Đẩy token + memberid lưu xuống db
    * @param devicetoken key token của device
    * @param authentoken key id member user
    */
    pushTokenAndMemberID(authentoken, devicetoken, appversion) {
        var se = this;
        if (authentoken) {
            var text = "Bearer " + authentoken;
            var options = {
                method: 'POST',
                url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/PushTokenOfUser',
                timeout: 10000,
                maxAttempts: 5,
                retryDelay: 2000,
                headers: {
                    'cache-control': 'no-cache',
                    'content-type': 'application/json-patch+json',
                    authorization: text
                },
                body: {
                    tokenId: devicetoken,
                    appVersion: appversion ? appversion.replace(/\./g, '') : ''
                },
                json: true
            };
            request(options, function (error, response, body) {
                if (error) {
                    error.page = "login";
                    error.func = "pushTokenAndMemberID";
                    error.param = JSON.stringify(options);
                    C.writeErrorLog(error,response);
                }
            })
        }
    }

    DeleteTokenOfUser(deviceToken, userToken, appversion) {
        var se = this;
        if (userToken) {
            var text = "Bearer " + userToken;
            var options = {
                method: 'POST',
                url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/DeleteNotificationTokenOfUser',
                timeout: 10000,
                maxAttempts: 5,
                retryDelay: 2000,
                headers: {
                    'cache-control': 'no-cache',
                    'content-type': 'application/json-patch+json',
                    authorization: text
                },
                body: {
                    tokenId: deviceToken,
                    appVersion: appversion ? appversion.replace(/\./g, '') : ''
                },
                json: true
            };
            request(options, function (error, response, body) {
                if (error) {
                    error.page = "login";
                    error.func = "pushTokenAndMemberID";
                    error.param = JSON.stringify(options);
                    C.writeErrorLog(error,response);
                }
            })
        }
    }

    /**
* Hàm gọi api chung
* @param methodFunc phương thức GET/POST
* @param strUrl Chuỗi api
* @param headerObj object header nếu có
* @param bodyObj object body nếu có
* @param pageName Tên page gọi api
* @param funcName Tên fucntion gọi api
*/
    async RequestApi(methodFunc, strUrl, headerObj, bodyObj, pageName, funcName): Promise<any> {
        var se = this;
        return new Promise(
            (resolve, reject) => {
              var options;
              if(headerObj && bodyObj ){
                options = {
                  method: methodFunc,
                  url: strUrl,
                  headers: headerObj,
                  body: bodyObj,
                  json: true,
                  timeout: 180000,
                  maxAttempts: 5,
                  retryDelay: 2000
                }
              }
              
              if(headerObj && !bodyObj){
                options = {
                  method: methodFunc,
                  url: strUrl,
                  timeout: 180000,
                  maxAttempts: 5,
                  retryDelay: 2000,
                  headers: headerObj
                }
              }

              if(!headerObj && !bodyObj){
                options = {
                  method: methodFunc,
                  url: strUrl,
                  timeout: 180000,
                  maxAttempts: 5,
                  retryDelay: 2000,
                }
              }

                request(options, function (error, response, body) {
                    if (response.statusCode != 200) {
                        if(headerObj && headerObj.authorization && response.statusCode == 401){//Token hết hạn
                            //se.showConfirm("Phiên đăng nhập hết hạn. Xin vui lòng đăng nhập lại để sử dụng chức năng này.");
                        }else{
                            var objError = {
                                page: pageName,
                                func: funcName,
                                message: response.statusMessage,
                                content: response.body,
                                type: "warning",
                                param: JSON.stringify(options)
                            };
                            C.writeErrorLog(objError,response);
                        }
                        resolve([]);
                    }
                    if (error) {
                        error.page = pageName;
                        error.func = funcName;
                        error.param = JSON.stringify(options);
                        C.writeErrorLog(objError,response);
                    }
                    if (response && response.statusCode == 200) {
                        if(body && body.data){
                            resolve(body);
                        } 
                        else if(body && body.tags || body.length >=0 || body.listRegion || body.childRegions || body.subRegions){
                            resolve(body);
                        }
                        else if(body && body.success){
                            resolve(body.success);
                        }
                        else{
                            resolve(JSON.parse(body));
                        }
                        
                    }

                })
            }
        )
    }

    public async showConfirm(msg){
        let alert = await this.alertCtrl.create({
          message: msg,
          cssClass: 'cls-global-confirm',
          buttons: [
          {
            text: 'Để sau',
            handler: () => {
              this.storage.remove('auth_token');
              this.storage.remove('email');
              this.storage.remove('username');
              this.storage.remove('jti');
              this.storage.remove('userInfoData');
              this.storage.remove('userRewardData');
              this.storage.remove('point');
              this.storage.remove('blogtripdefault');
              this.storage.remove('infocus');
              this.navCtrl.navigateBack('/');
            }
          },
          {
            text: 'Đăng nhập',
            role: 'OK',
            handler: () => {
              this.storage.remove('auth_token');
              this.storage.remove('email');
              this.storage.remove('username');
              this.storage.remove('jti');
              this.storage.remove('userInfoData');
              this.storage.remove('userRewardData');
              this.storage.remove('point');
              this.storage.remove('blogtripdefault');
              //this.valueGlobal.logingoback = "MainPage";
              this.navCtrl.navigateForward('/login');
            }
          }
        ]
      });
      alert.present();
    }

    public dataURLtoFile(dataurl, filename) {
 
        var arr = dataurl.split(','),
            mime = arr[0].match(/:(.*?);/)[1],
            bstr = atob(arr[1]), 
            n = bstr.length, 
            u8arr = new Uint8Array(n);
            
        while(n--){
            u8arr[n] = bstr.charCodeAt(n);
        }
        
        return new File([u8arr], filename, {type:mime});
    }

    public urltoFile(url, filename, mimeType){
        return (fetch(url)
            .then(function(res){return res.arrayBuffer();})
            .then(function(buf){return new File([buf], filename,{type:mimeType});})
        );
    }

    public async dataURItoBlob(dataURI) {
        if(typeof dataURI !== 'string'){
            throw new Error('Định dạng file không hợp lệ.');
        }
        dataURI = dataURI.split(',');
        var type = dataURI[0].split(':')[1].split(';')[0],
            byteString = atob(dataURI[1]),
            byteStringLength = byteString.length,
            arrayBuffer = new ArrayBuffer(byteStringLength),
            intArray = new Uint8Array(arrayBuffer);
        for (var i = 0; i < byteStringLength; i++) {
            intArray[i] = byteString.charCodeAt(i);
        }
        return new Blob([intArray], {
            type: type
        });
    }

    public convertBase64ToBlob(b64Data : string, contentType : string): Blob 
    {
      contentType = contentType || '';
      const sliceSize = 512;
      b64Data = b64Data.toString().replace(/^[^,]+,/, '');
      b64Data = b64Data.toString().replace(/\s/g, '');
      const byteCharacters = window.atob(b64Data);
      const byteArrays = [];
      for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        const slice = byteCharacters.slice(offset, offset + sliceSize);
        const byteNumbers = new Array(slice.length);
    
        for (let i = 0; i < slice.length; i++) {
          byteNumbers[i] = slice.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
      }
    
      return new Blob(byteArrays, { type: contentType });
    }
}

export class ActivityService {
    public bank: any;
    public child: any;
}