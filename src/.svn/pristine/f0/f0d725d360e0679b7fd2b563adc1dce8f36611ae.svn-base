import { audit } from 'rxjs/operators';
import { json } from 'body-parser';
import { Component, NgZone, ViewChild, OnInit } from '@angular/core';
import { NavController, Platform} from '@ionic/angular';
import * as request from 'requestretry';
import { AuthService } from '../providers/auth-service';
import * as moment from 'moment';
import { SearchHotel } from '../providers/book-service';
import { C } from './../providers/constants';
import { GlobalFunction } from './../providers/globalfunction';
import { Network } from '@ionic-native/network/ngx';
import { NetworkProvider } from './../network-provider.service';
import { Storage } from '@ionic/storage';
import { Keyboard } from '@ionic-native/keyboard/ngx';
import * as $ from 'jquery';
import { Geolocation } from '@ionic-native/geolocation/ngx';
import { Map, tileLayer, marker, icon,latLng } from 'leaflet';
import * as L from 'leaflet';

@Component({
  selector: 'app-searchexperienceregion',
  templateUrl: './searchexperienceregion.page.html',
  styleUrls: ['./searchexperienceregion.page.scss'],
})
export class SearchExperienceRegionPage implements OnInit {
  showpopup = false;
  ischeckadults = true;
  ischeckchild = false;
  ischeckroom = false;
  public room1 = 1; public room = 1; gbitem; gbmsg;
  items = []; ischecklist = false; isenabled = true;
  listregion = [];
  co = 0; recent; index
  setInter;ischecktext=false;
  public isConnected:boolean;
  json: any;
  @ViewChild('inputSearchbar') input;
  itemsDisplay: any=[];
  constructor(public platform: Platform,
    public navCtrl: NavController, 
    public authService: AuthService, 
    public zone: NgZone, 
    public searchHotel: SearchHotel,
    public gf: GlobalFunction,
    public networkProvider: NetworkProvider,
    public storage: Storage,
    public keyboard: Keyboard,
    private geolocation: Geolocation) { 
    this.isConnected = this.networkProvider.isOnline();
      if (this.isConnected) {
        setTimeout(()=>{
          this.storage.get('listexeperienceregion').then((data:any)=>{
            if(data){
              this.zone.run(()=>{
                this.listregion.push(...data);
                this.items = data;
              })
            }else{
              this.getdata();
            }
          })
        },100)
      }else{
        this.gf.showWarning('Không có kết nối mạng','Vui lòng kết nối mạng để sử dụng các tính năng của ứng dụng','Đóng');
      }
  }

  ngOnInit() {
  }

  ionViewDidEnter(){
    // setTimeout(() => {
    //   this.input.setFocus();
    // }, 150);
    //this.keyboard.show();
  }

  ionViewWillEnter(){
    var se = this;
    if(se.searchHotel.ItemExperienceRegionRecent && se.searchHotel.ItemExperienceRegionRecent.length>0){
      se.recent = se.searchHotel.ItemExperienceRegionRecent;
      se.recent.forEach(element => {
        if(element.tagsJson && element.tagsJson.length>0){
          element.tag = element.tagsJson[0].id;
        }
        
      });
    }
  }

  goback(){
    this.navCtrl.back();
  }

  cancelInput(){
    var se = this;
    se.ischecklist = false;
    se.ischecktext=false;
    se.items
    se.items = se.items.filter(function(item:any){
      return se.gf.checkExistsItemInArray(se.listregion, item, 'experiencesearch');
    });
  }

  getItems(ev: any) {
    var se = this;
    if(ev.detail.value){
      const val = ev.detail.value;
      //let url = C.urls.baseUrl.urlMobile + '/api/Data/GetPlace?Name='+val+'&SubRegions=0&paging.pageNumber=0&paging.pageSize=200';
      let url = C.urls.baseUrl.urlMobile + '/api/Data/TypeaheadPlace?search='+val;
          se.gf.RequestApi('GET',url,{},{},'SearchExperienceRegionPage', 'getItems').then((data:any)=>{
            if(data && data.length>0){
              se.ischecklist= true;
              if(se.items.length ==0){
                data.forEach(element => {
                  element.show = true;
                  element.searchType= element.placeId ? 1 : 2;// 1 - place
                  se.calculateDistanceMarker(element, 'totalDistance');
                })
                se.items.push(...data);
              }else{
                se.items.forEach(e => {
                  e.show = false;
                })

                se.itemsDisplay.forEach(e => {
                  e.show = false;
                })

                data.forEach(element => {
                  let check = se.items.filter((i)=>{ return i.id == element.id });
                  element.searchType = element.placeId ? 1 : 2;//place
                  se.calculateDistanceMarker(element, 'totalDistance');
                  if(check && check.length == 0)
                  {
                    element.show = true;
                    se.items.push(element);
                  }else{
                    check[0].show = true;
                  }
                })
              }

              setTimeout(()=>{
                se.sortData();
              },10)

              setTimeout(()=>{
                se.orderByPlace();
              },200)
            }
            // else{
            //   se.loadDataHotel(val);
            // }
          })
    }else{
      se.ischecklist = false;
      se.ischecktext=false;
      // se.items.forEach(element => {
      //     element.show = false;
      // });
      se.items = se.items.filter(function(item:any){
        return se.gf.checkExistsItemInArray(se.listregion, item, 'experiencesearch');
      });
    }
  }

  loadDataHotel(val){
    var se = this;
      var options = {
        method: 'GET',
        url: C.urls.baseUrl.urlGet + '/GListSuggestion',
        timeout: 10000, maxAttempts: 5, retryDelay: 2000,
        qs: { key: val },
        headers:
        {
        }
      };

      request(options, function (error, response, body) {
        if (error) {
          error.page = "SearchExperienceRegionPage";
          error.func = "loadDataHotel";
          error.param =  JSON.stringify(options);
          C.writeErrorLog(error);
        };
        se.zone.run(() => {
          let lstitems = JSON.parse(body);
          
          if(lstitems.length && lstitems.length >0){
            se.ischecklist= true;
              se.itemsDisplay = [];

              if(se.items.length ==0){
                lstitems.forEach(element => {
                  element.show = true;
                  element.searchType=2;//hotel, region
                  se.bindItemName(element);
                })
                se.items.push(...lstitems);
              }else{
                se.items.forEach(e => {
                  e.show = false;
                })

                lstitems.forEach(element => {
                  element.searchType=2;//hotel, region
                  se.bindItemName(element);
                  let check = se.items.filter((i)=>{ return i.id == element.id });
                  if(check && check.length == 0)
                  {
                    element.show = true;
                    se.items.push(element);
                  }else{
                    check[0].show = true;
                  }
                })
              }
          }
          else{
            se.items.forEach(element => {
              element.show = false;
            });
            se.itemsDisplay.forEach(element => {
              element.show = false;
            });
            se.ischecktext=true;
          }
        });
      })
  }

  bindItemName(item){
    var se = this;
    se.zone.run(()=>{
      if(item.searchType == 2 && item.Type ==1){
        item.name = item.HotelName;
        item.id = item.HotelId;
        let arr = item.HotelUrl.split('/');
        item.searchHotelName = arr[arr.length - 1].toString().replace('khach-san-','');
        item.searchRegionCode = arr[arr.length - 2].toString().replace('khach-san-','');
        item.latitude = item.Latitude;
        item.longitude = item.Longitude;
      }else if(item.searchType == 2 && item.Type ==2){
        item.name = item.RegionName;
        item.code = item.RegionCode;
        item.id = item.RegionId;
        item.latitude = item.Latitude;
        item.longitude = item.Longitude;
      }
    })
    return item;
  }

  getdata(){
    var se = this;
    let url = C.urls.baseUrl.urlMobile + '/api/Data/GetRegionSearch';
    se.gf.RequestApi('GET',url, {}, {}, 'SearchExperienceRegionPage', 'GetRegionSearch').then((data:any)=>{
      let lstitems = data.listRegion;
          if(lstitems && lstitems.length >0){
            se.storage.set('listexeperienceregion',lstitems);
            se.ischecktext=false;
            se.ischecklist = false;
            
              if(se.items.length ==0){
                lstitems.forEach(element => {
                  element.show = true;
                  element.searchType =1;
                })
                se.items.push(...lstitems);
              }else{
                se.items.forEach(e => {
                  e.show = false;
                })

                lstitems.forEach(element => {
                  element.searchType =1;
                  let check = se.items.filter((i)=>{ return i.id == element.id });
                  if(check && check.length == 0)
                  {
                    element.show = true;
                    se.items.push(element);
                  }else{
                    check[0].show = true;
                  }
                })
              }
            
          }else{
            se.items.forEach(element => {
              element.show = false;
            });
            se.ischecktext=true;
          }
        //});
    })
  }

  nextRecent(item){
    var se = this;
    se.searchHotel.inputExperienceRegionCode= item.regionCode ? item.regionCode : item.code;
    se.searchHotel.inputExperienceText = item.placeId ? item.name : (item.hotelName  ? item.hotelName: item.name) ;
    se.searchHotel.inputExperienceItem = item;
    // if(se.searchHotel.inputExperienceItem.searchHotelName && se.searchHotel.inputExperienceItem.searchType == 2){
    //   se.searchHotel.inputExperienceRegionCode = se.searchHotel.inputExperienceItem.searchRegionCode;
    // }
    //se.searchHotel.ItemExperienceRegionRecent.push(item);
    // if(se.searchHotel.inputExperienceItem.searchHotelName && se.searchHotel.inputExperienceItem.searchType == 2){
    //   se.searchHotel.inputExperienceRegionCode = se.searchHotel.inputExperienceItem.searchRegionCode;
    //   $.get('https://nominatim.openstreetmap.org/search?format=json&q='+se.searchHotel.inputExperienceItem.searchHotelName, function(data){
    //     if(data && data.length>0){
    //       var element = data[0];
    //       se.searchHotel.inputExperienceItem.latitude = element.lat;
    //       se.searchHotel.inputExperienceItem.longitude = element.lon;
    //       se.navCtrl.back();
    //     }
    //   });
    // }else{
    //   this.navCtrl.back();
    // }
    this.navCtrl.back();
  }

  nextPopular(item, index){
    var se = this;
    se.searchHotel.inputExperienceRegionCode= item.code;
    se.searchHotel.inputExperienceText = item.name ? item.name : item.hotelName;
    se.searchHotel.inputExperienceItem = item;
    if(se.searchHotel.ItemExperienceRegionRecent && se.searchHotel.ItemExperienceRegionRecent.length >0){
      //Check khác id thì clear localcheckfilter
      var len = se.searchHotel.ItemExperienceRegionRecent.length;
      var itemRecentPrevious =  se.searchHotel.ItemExperienceRegionRecent[len -1];
      if(itemRecentPrevious && itemRecentPrevious.id != item.id){
        se.searchHotel.ef_arrlocalnamecheck =[];
      }
      if(!se.gf.checkExistsItemInArray(se.searchHotel.ItemExperienceRegionRecent,item,'experiencesearch')){
        //Trên 3 item thì lấy 2 item gần nhất và push thêm item được click
        if(se.searchHotel.ItemExperienceRegionRecent.length >2){
          se.searchHotel.ItemExperienceRegionRecent = se.searchHotel.ItemExperienceRegionRecent.slice(1,3);
          se.searchHotel.ItemExperienceRegionRecent.push(item);
        }else{//Nếu chưa quá 3 item thì push vào mảng
          se.searchHotel.ItemExperienceRegionRecent.push(item);
        }
      }else{
        //Xóa và push lại để được index của item vừa chọn lên đầu
        se.gf.removeItemInArray(se.searchHotel.ItemExperienceRegionRecent, item);
        se.searchHotel.ItemExperienceRegionRecent.push(item);
      }
      
    }else{//Chưa có item nào thì push vào mảng
      se.searchHotel.ItemExperienceRegionRecent.push(item);
    }
    
    se.navCtrl.back();
  }

  itemclick(item) {
    var se = this;
    se.searchHotel.inputExperienceRegionCode= item.regionCode;
    se.searchHotel.inputExperienceText = item.placeId ? item.name : (item.hotelName ? item.hotelName : item.name);
    se.searchHotel.inputExperienceItem = item;
    // if(se.searchHotel.inputExperienceItem.searchHotelName && se.searchHotel.inputExperienceItem.searchType == 2){
    //   se.searchHotel.inputExperienceRegionCode = se.searchHotel.inputExperienceItem.searchRegionCode;
    // }
    if(se.searchHotel.ItemExperienceRegionRecent && se.searchHotel.ItemExperienceRegionRecent.length >0){
      //Check khác id thì clear localcheckfilter
      var len = se.searchHotel.ItemExperienceRegionRecent.length;
      var itemRecentPrevious =  se.searchHotel.ItemExperienceRegionRecent[len-1];
      if(itemRecentPrevious && itemRecentPrevious.id != item.id){
        se.searchHotel.ef_arrlocalnamecheck =[];
      }
      if(!se.gf.checkExistsItemInArray(se.searchHotel.ItemExperienceRegionRecent,item,'experiencesearch')){
        //Trên 3 item thì lấy 2 item gần nhất và push thêm item được click
        if(se.searchHotel.ItemExperienceRegionRecent.length >2){
          se.searchHotel.ItemExperienceRegionRecent = se.searchHotel.ItemExperienceRegionRecent.slice(1,3);
          se.searchHotel.ItemExperienceRegionRecent.push(item);
        }else{//Nếu chưa quá 3 item thì push vào mảng
          se.searchHotel.ItemExperienceRegionRecent.push(item);
        }
      }
      else{
        //Xóa và push lại để được index của item vừa chọn lên đầu
        se.gf.removeItemInArray(se.searchHotel.ItemExperienceRegionRecent, item);
        se.searchHotel.ItemExperienceRegionRecent.push(item);
      }
    }else{//Chưa có item nào thì push vào mảng
      se.searchHotel.ItemExperienceRegionRecent.push(item);
    }
    // if(se.searchHotel.inputExperienceItem.searchHotelName && se.searchHotel.inputExperienceItem.searchType == 2){
    //   se.searchHotel.inputExperienceRegionCode = se.searchHotel.inputExperienceItem.searchRegionCode;
    //   $.get('https://nominatim.openstreetmap.org/search?format=json&q='+se.searchHotel.inputExperienceItem.searchHotelName, function(data){
    //     if(data && data.length>0){
    //       var element = data[0];
    //       se.searchHotel.inputExperienceItem.latitude = element.lat;
    //       se.searchHotel.inputExperienceItem.longitude = element.lon;
    //       se.navCtrl.back();
    //     }
    //   });
    // }else{
    //   se.navCtrl.back();
    // }
    se.navCtrl.back();
  }

  getDeviceLocation(){
    var se = this;
    se.searchHotel.inputExperienceItem = null;
    se.navCtrl.back();
  }

  /**
   * Tính khoảng cách giữa các điểm so với vị trí hiện tại
   * @rest: item cần sort
   * @sortColumn: tên cột dữ liệu sort
   * @itemDest: item lấy làm mốc để sort
   */
  calculateDistanceMarker(rest:any, sortColumn){
    var se = this;
    if(!rest.latitude || !rest.longitude){
      rest[sortColumn] = 99999;
    }else{
      if(sortColumn == 'totalDistance'){
        if(se.searchHotel.deviceLocation.latitude){
          rest[sortColumn] = (Math.round(L.latLng(se.searchHotel.deviceLocation.latitude, se.searchHotel.deviceLocation.longitude).distanceTo(L.latLng(rest.latitude, rest.longitude)))/1000).toFixed(1);
        }else{
          rest[sortColumn] = 0;
        }
        
      }
    }
    
  }

  sortData(){
    var se = this;
    if (se.items && se.items.length > 0) {
      se.zone.run(() => se.items.sort(function (a, b) {
        let direction = -1;
        if(a.searchType <= b.searchType){
          if(!a['totalDistance']){
            return 1 * direction;
          }else if(!b['totalDistance']){
            return -1 * direction;
          }
          else{
            let a1 = a['totalDistance'].toString().replace('.','')*1;
            let b1 = b['totalDistance'].toString().replace('.','')*1;
            if (a1 < b1) {
              return 1 * direction;
            }
            else{
              return -1 * direction;
            }
          }
        }else{
          return 1 * direction;
        }
          
            
      }));
    }
  }

  orderByPlace(){
    var se = this;
    if(se.items && se.items.length>0){
      se.items.forEach(element => {
        if(element.show && !se.gf.checkExistsItemInArray(se.itemsDisplay, element, 'experiencesearch')){
          se.itemsDisplay.push(element);
        }
      });

      if(se.itemsDisplay && se.itemsDisplay.length>0){
        se.zone.run(() => se.itemsDisplay.sort(function (a, b) {
          let direction = -1;
          if(a.show || b.show){
            if(a.type < b.type){
              return 99 * direction;
            }else if(b.type < a.type){
              return 1 * direction;
            }
            else{
              let a1 = a['totalDistance'].toString().replace('.','')*1;
              let b1 = b['totalDistance'].toString().replace('.','')*1;
              if (a1 < b1) {
                return 1 * direction;
              }
              else{
                return -1 * direction;
              }
            }
          }
        })
        )
      }
    }
  }
}
