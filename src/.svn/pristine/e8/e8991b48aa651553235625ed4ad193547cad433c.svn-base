import { Component, OnInit, NgZone } from '@angular/core';
import { NavController, Platform } from '@ionic/angular';
import { C } from '../providers/constants';
import { GlobalFunction } from '../providers/globalfunction';
import { ActivatedRoute } from '@angular/router';
import * as request from 'requestretry';
import * as moment from 'moment';
import { SocialSharing } from '@ionic-native/social-sharing/ngx';
import { ValueGlobal, SearchHotel } from '../providers/book-service';
import { Storage } from '@ionic/storage';
import { NetworkProvider } from '../network-provider.service';
/**
 * Generated class for the PolicyPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@Component({
  selector: 'app-bloglist',
  templateUrl: 'bloglist.html',
  styleUrls: ['bloglist.scss'],
})
export class BlogListPage implements OnInit {
  blogtrips = []; arrbloglike; istextblog = false; public isConnected: boolean = true; username; page = 1;
  _infiniteScroll: any; ischeckloadmore = false;
  constructor(public searchhotel:SearchHotel, public networkProvider: NetworkProvider, public valueGlobal: ValueGlobal, public storage: Storage, public platform: Platform, public navCtrl: NavController, public value: ValueGlobal, public gf: GlobalFunction, private activatedRoute: ActivatedRoute, public zone: NgZone, private socialSharing: SocialSharing) {
    this.searchhotel.backPage = "bloglist";
    storage.get('username').then(username => {
      this.username = username;
    });
    if (this.networkProvider.isOnline()) {
      this.isConnected = true;
      this.networkProvider.setNetworkStatus(true);
      this.gf.setNetworkStatus(true);
      this.getbloglike(0);
    } else {
      this.isConnected = false;
      this.networkProvider.setNetworkStatus(false);
      this.gf.setNetworkStatus(false);
      this.gf.showWarning('Không có kết nối mạng', 'Vui lòng kết nối mạng để sử dụng các tính năng của ứng dụng', 'Đóng');
    }

  }

  ngOnInit() {

  }

  getblogtrips() {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'GET',
          url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/GeBlogByTripLatestOfUser' + '?pageIndex=' + this.page + '&pageSize=10',
          timeout: 10000, maxAttempts: 5, retryDelay: 2000,
          headers:
          {
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            authorization: text
          }
        };
        request(options, function (error, response, body) {
          if (error) {
            error.page = "hotellike";
            error.func = "getblog";
            error.param = JSON.stringify(options);
            C.writeErrorLog(error);
            throw new Error(error)
          }
          se.zone.run(() => {
            if (body && body.length > 0) {
              var listBlogtemp = JSON.parse(body);
              if (listBlogtemp.error) {
                se.blogtrips = [];
              }
              if (se.arrbloglike.length > 0) {
                var itemblog;
                for (let i = 0; i < listBlogtemp.length; i++) {
                  listBlogtemp[i].date = moment(listBlogtemp[i].date).format('HH:ss DD/MM/YYYY');
                  itemblog = { avatar: listBlogtemp[i].avatar, date: listBlogtemp[i].date, id: listBlogtemp[i].id, title: listBlogtemp[i].title, url: listBlogtemp[i].url, Like: false }
                  for (let j = 0; j < se.arrbloglike.length; j++) {
                    if (se.arrbloglike[j].id == listBlogtemp[i].id) {
                      itemblog = { avatar: listBlogtemp[i].avatar, date: listBlogtemp[i].date, id: listBlogtemp[i].id, title: listBlogtemp[i].title, url: listBlogtemp[i].url, Like: true };
                      break;
                    }
                  }
                  se.blogtrips.push(itemblog);
                }
              }
              else {
                for (let i = 0; i < listBlogtemp.length; i++) {
                  listBlogtemp[i].date = moment(listBlogtemp[i].date).format('HH:ss DD/MM/YYYY');
                  itemblog = { avatar: listBlogtemp[i].avatar, date: listBlogtemp[i].date, id: listBlogtemp[i].id, title: listBlogtemp[i].title, url: listBlogtemp[i].url, Like: false }
                  se.blogtrips.push(itemblog);
                }
              }
              se._infiniteScroll.target.complete();
            }

          });
        });
      }
      else {

      }
    });
  }
  getbloglike(value) {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'GET',
          url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/GetFavouriteBlogByUser',
          timeout: 10000, maxAttempts: 5, retryDelay: 2000,
          headers:
          {
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            authorization: text
          }
        };
        request(options, function (error, response, body) {
          if (error) {
            error.page = "hotellike";
            error.func = "getblog";
            error.param = JSON.stringify(options);
            C.writeErrorLog(error);
            throw new Error(error)
          }
          se.zone.run(() => {
            se.arrbloglike = JSON.parse(body);
            if (se.arrbloglike.msg) {
              se.arrbloglike = [];
            }
            if (value == 0) {
              se.getblogtrips();
            } else {
              se.bindItemLike(se.arrbloglike);
            }
          });
        });
      }
    });
  }
  bindItemLike(listLike) {
    var se = this;
    se.blogtrips.forEach(element => {
      var itemlikemap = listLike.filter((item) => { return item.id == element.id });
      if (itemlikemap && itemlikemap.length > 0) {
        se.zone.run(() => {
          element.Like = true;
        })
      }
      else {
        se.zone.run(() => {
          element.Like = false;
        })
      }
    });

  }
  likeItemblog(id) {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'POST',
          url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/AddFavouriteBlog',
          timeout: 10000, maxAttempts: 5, retryDelay: 2000,
          headers:
          {
            authorization: text
          },
          body: { postId: id },
          json: true
        };

        request(options, function (error, response, body) {
          if (response.statusCode != 200) {
            var objError = {
              page: "hotel-list",
              func: "likeItem",
              message: response.statusMessage,
              content: response.body,
              type: "warning",
              param: JSON.stringify(options)
            };
            C.writeErrorLog(objError);
          }
          if (error) {
            error.page = "hotel-list";
            error.func = "likeItem";
            error.param = JSON.stringify(options);
            C.writeErrorLog(error);
          };
          se.zone.run(() => se.getbloglike(1));
        });

      }
      else {
        se.valueGlobal.logingoback = 'TabPage';
        se.navCtrl.navigateForward('/login');
      }
    });
  }
  unlikeItemblog(id) {
    var se = this;
    se.storage.get('auth_token').then(auth_token => {
      if (auth_token) {
        var text = "Bearer " + auth_token;
        var options = {
          method: 'POST',
          url: C.urls.baseUrl.urlMobile + '/mobile/OliviaApis/RemoveFavouriteBlogByUser',
          timeout: 10000, maxAttempts: 5, retryDelay: 2000,
          headers:
          {
            authorization: text
          },
          body: { postId: id },
          json: true
        };

        request(options, function (error, response, body) {
          if (response.statusCode != 200) {
            var objError = {
              page: "blog",
              func: "unlikeItem",
              message: response.statusMessage,
              content: response.body,
              type: "warning",
              param: JSON.stringify(options)
            };
            C.writeErrorLog(objError);
          }
          if (error) {
            error.page = "blog";
            error.func = "unlikeItem";
            error.param = JSON.stringify(options);
            C.writeErrorLog(error);
          };
          se.zone.run(() => se.getbloglike(1));

          console.log(body);
        });
      }
      else {
        this.navCtrl.navigateForward('/login');
      }
    });
  }
  share(url) {
    this.socialSharing.share(null, null, null, url).then(() => {
      // Success!
    }).catch(() => {
      // Error!
    });
  }
  goback() {
    this.navCtrl.navigateBack(['/app/tabs/tab1']);
  }
  itemblogclick(item) {
    this.valueGlobal.urlblog = item.url;
    this.navCtrl.navigateForward('/blog/' + item.id);
    //google analytic
    this.gf.googleAnalytion('blog', 'Search', '');
  }
  doInfinite(infiniteScroll) {
    var se = this;
    setTimeout(() => {
      se.page = se.page + 1;
      this._infiniteScroll = infiniteScroll;
      se.getbloglike(0);
      //infiniteScroll.target.complete();
    }, 10);
  }
  ionViewWillEnter() {
    this.getbloglike(1);
  }
}
